!function(t){function e(i){if(n[i])return n[i].exports;var a=n[i]={exports:{},id:i,loaded:!1};return t[i].call(a.exports,a,a.exports,e),a.loaded=!0,a.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){"use strict";function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var a=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),r=n(1);FusionCharts.register("extension",["private","growth-analyser-ext",function(){var t=function(){function t(){i(this,t),this.toolbox=FusionCharts.getComponent("api","toolbox"),this.HorizontalToolbar=this.toolbox.HorizontalToolbar,this.ComponentGroup=this.toolbox.ComponentGroup,this.SymbolStore=this.toolbox.SymbolStore,window.a=this}return a(t,[{key:"renderChange",value:function(){var t=this.tsObject.chartInstance,e=t.apiInstance.getComponentStore(),n=0;for(n=0;e.getCanvasByIndex(n);++n)e.getCanvasByIndex(n).getComposition().PlotManager.plot()}},{key:"analyser",value:function(t){var e,n=this.ga||{},i=this.tsObject.apiInstance.getComponentStore(),a=i.getCanvasByIndex(0),o=a.getComposition(),s=n.ds||o.dataset,l=n.idMap||{},h=n.storeAr||[],u=[],c=a.composition.yAxis;if("reset"===t?c.getScaleObj().getIntervalObj().getConfig("intervals").major.formatter=function(t){return t}:c.getScaleObj().getIntervalObj().getConfig("intervals").major.formatter=function(t){return t+"%"},this.ga=n,!n.storeAr&&(i={},!n.idMap)){s.forEachSeries(function(t,e,n,a){i[a.getId()]=a.getOriginalData()});for(e in i)h.push(i[e]),l[e]=h.length-1;n.idMap=l,n.ds=s,n.storeAr=h,n.gAnalyser=new r(h)}u=n.gAnalyser.analyse(t),s.setDataBySeries(function(t){u.length&&t.setOriginalData(u[l[t.getId()]])}),o.impl.update()}},{key:"init",value:function(t){var e=this;return t(["xAxis","yAxis","graphics","chart","dataset","PlotManager","canvasConfig","MarkerManager","reactiveModel","globalReactiveModel","spaceManagerInstance","smartLabel","chartInstance","extData","canvasData",function(t,n,i,a,r,o,s,l,h,u,c,p,d,f,g){e.xAxis=t,e.yAxis=n,e.graphics=i,e.chart=a,e.dataset=r,e.plotManager=o,e.markerManager=l,e.canvasConfig=s,e.reactiveModel=h,e.globalReactiveModel=u,e.spaceManagerInstance=c,e.smartLabel=p,e.chartInstance=d,e.canvasData=g,e.extData=f}]),this.spaceManagerInstance=e.spaceManagerInstance,this.globalReactiveModel=e.globalReactiveModel,this.tsObject=e.chartInstance,this.startDt=e.globalReactiveModel.model["x-axis-visible-range-start"],this.endDt=e.globalReactiveModel.model["x-axis-visible-range-end"],this.startDataset=e.globalReactiveModel.model["x-axis-absolute-range-start"],this.endDataset=e.globalReactiveModel.model["x-axis-absolute-range-end"],this.toolbars=[],this.measurement={},this.toolbars.push(this.createToolbar()),this}},{key:"createToolbar",value:function(){var t,e,n,i,a=this,r=[],o={},s=this.graphics.paper,l=this.graphics.container,h={"font-size":"12px",color:"#4b4b4b","font-family":'"Lucida Grande", Sans-serif'},u={"font-size":"13px",color:"#4b4b4b","font-family":'"Lucida Grande", Sans-serif',fontWeight:"bold"};t=new this.HorizontalToolbar({paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container}),t.setConfig({fill:"#fff",borderThickness:0}),e=new this.toolbox.ComponentGroup({paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container}),e.setConfig({fill:"#fff",borderThickness:0}),o={"First Index":{position:0},"Previous Index":{relposition:-1},"Specific Value":{submenu:!0,Minimum:"Minimum",Maximum:"Maximum",Mean:"Mean",Median:"Median","Standard Deviation":"Standard Deviation","Custom Value...":function(){i(function(t){return a.analyser(t)})}}},n=new this.toolbox.SymbolWithContext("ContextIcon",{paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container},{width:24,height:24,position:"right",stroke:"#ced5d4",strokeWidth:"1",radius:"1",symbolStroke:"#696969",symbolStrokeWidth:"2"}),r.push({"Growth Analyser":{style:u}}),i=function(t){function e(){i.hide(),t(u.val())}function n(){u.element.value=u.element.value.replace(/[^\d.-]/g,"")}var i,r,o,h,u,c,p={fontSize:"10px",lineHeight:"15px","font-family":'"Lucida Grande", Sans-serif',stroke:"#676767","stroke-width":"2"},d=180,f=.47*a.chart.width-90,g=a.chart.height/2-40;i=s.html("div",{fill:"#f7f7f7",x:f,y:g,width:180,height:80},p,l),r=s.html("div",{fill:"#e8e8e8",width:d,height:20},p,i),o=s.html("div",{fill:"transparent",width:.6*d,height:20,x:10,y:2},p,r),o.attr({text:"Provide value"}),h=s.html("div",{fill:"transparent",width:10,height:10,position:"relative",float:"right",text:"X",cursor:"pointer"},p,r),h.on("click",function(){i.hide()}),u=s.html("input",{width:100,height:20,x:10,y:30},p,i),c=s.html("div",{width:50,height:20,x:120,y:30,fill:"#555555"},{fontSize:"10px",lineHeight:"15px","font-family":'"Lucida Grande", Sans-serif',fill:"#eaeaea",color:"#eaeaea",stroke:"#eaeaea",cursor:"pointer"},i),c.on("click",function(){e()}),u.on("keyup",function(t){13===t.keyCode&&e()}),c.attr({text:"Apply"}),u.element.focus(),u.element.addEventListener("keyup",n),h.element.style.position="relative",h.element.style.backgroundColor="#d2d2d2",h.element.style.border="2px solid #cbcbcb",h.element.style.padding="0px 0px 3.5px 2px",h.element.style.color="#8c8c8c",h.element.style.margin="1px 2px",h.element.style.float="right",u.element.style.marginTop="8px",u.element.style.border="2px solid #dadbda",c.element.style.marginTop="8px",i.element.style.border="1px solid #d4d2d3",r.element.style.border="1px solid #d4d2d3",r.element.style.width="179px",o.element.style.fontSize="11.5px",o.element.style.marginTop="0.5px",o.element.style.color="#676767",r.element.style["font-family"]='"Lucida Grande", Sans-serif',c.element.style.textAlign="center",c.element.style.fontSize="11px",c.element.style.paddingTop="3px",c.element.style.borderRadius="3px",c.element.style.color="#e4e4e4"};var c=function(t){var e=void 0,n={},i={};if(o[t].submenu){e="&#9666&nbsp; "+t,n[e]={},n[e].action="click",n[e].style=h,n[e].handler=[];var s=function(r){var s=r,l=o[t][r];return"submenu"===r?"continue":(i={},i["&nbsp;"+s]={},i["&nbsp;"+s].handler=function(){"function"==typeof l?l():a.analyser(l)},i["&nbsp;"+s].action="click",i["&nbsp;"+s].style=h,n[e].handler.push(i),void(r.indexOf("Custom")===-1&&n[e].handler.push({"":{style:{backgroundColor:"#d5d2d2",height:"1px",margin:"1px",padding:"0px"}}})))};for(var l in o[t]){s(l)}}else e="&nbsp; &nbsp; "+t,n[e]={},n[e]={style:h,handler:function(){a.analyser(o[t])},action:"click"};r.push(n),r.push({"":{style:{backgroundColor:"#d5d2d2",height:"1px",margin:"1px",padding:"0px"}}})};for(var p in o)c(p);return r.push({"&nbsp; &nbsp; Reset View":{handler:function(){a.analyser("reset")},action:"click",style:h}}),n.appendAsList(r),this.SymbolStore.register("ContextIcon",function(t,e,n){var i=t,a=e,r=2*n,o=Math.round(r/4),s=.7*Math.round(r/2),l=i-s,h=i+s,u=a+o,c=a-o;return["M",l,a,"L",h,a,"M",l,u,"L",h,u,"M",l,c,"L",h,c]}),e.addSymbol(n),t.addComponent(e),t}},{key:"getLogicalSpace",value:function(t,e){t/=2;var n,i,a,r=0,o=0;for(i=0,a=this.toolbars.length;i<a;i++)n=this.toolbars[i].getLogicalSpace(t,e),r=Math.max(n.width,r),o+=n.height,this.toolbars[i].width=n.width,this.toolbars[i].height=n.height;return o+=this.padding,{width:r>t?0:r,height:o>e?0:o}}},{key:"placeInCanvas",value:function(){var t=this;t.padding=5,t.spaceManagerInstance.add([{name:function(){return"ToolBoxExt"},ref:function(t){return t[0]},self:function(){return t},priority:function(){return 2},layout:function(t){return t.inline},orientation:[{type:function(t){return t.horizontal},position:[{type:function(t){return t.top},alignment:[{type:function(t){return t.right},dimensions:[function(){var e=this.getParentComponentGroup();return t.getLogicalSpace(e.getWidth(),e.getHeight())}]}]}]}]}])}},{key:"setDrawingConfiguration",value:function(t,e,n,i,a){var r=this.measurement;return r.x=t,r.y=e,r.width=n,r.height=i,this.parentGroup=a,this}},{key:"draw",value:function(t,e,n,i,a){var r,o,s,l=this.measurement,h=this.toolbars;if(t=void 0===t?l.x:t,e=void 0===e?l.y:e,n=void 0===n?l.width:n,i=void 0===i?l.height:i,a=void 0===a?this.parentGroup:a,n&&i)for(o=0,r=h.length;o<r;o++)s=h[o],s.draw(t,e)}}]),t}();FusionCharts.registerComponent("extensions","growth-analyser-ext",t)}])},function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),a=function(){function t(e){n(this,t),this.data=e.map(function(t){return t.map(function(t){return t})}),this.Formulae=r}return i(t,[{key:"analyse",value:function(t){var e=0,n=0,i=0,a=0,r=0,o=[],s=0,l=this.data,h=[],u=[],c=0;if("string"==typeof t&&"reset"===t.toLowerCase())return l.map(function(t){return t.map(function(t){return t})});if(isNaN(t))if("string"==typeof t)for(t=this.Formulae[t],e=0,n=l.length;e<n;++e){for(u=[],s=t(l[e]),i=0,a=l[e].length;i<a;++i)r=l[e][i],c=0===s?void 0:100*(r-s)/s,u.push(c);h.push(u)}else if(isNaN(t.relposition))if(isNaN(t.position)&&"string"!=typeof t.position){if(!isNaN(t.reldatasetposition))for(t=t.reldatasetposition,e=0,n=l.length;e<n;++e){for(u=[],o=e+t>=0&&e+t<n?l[e+t]:l[e],i=0,a=l[e].length;i<a;++i)s=o[i],r=l[e][i],u.push(100*(r-s)/r);h.push(u)}}else for(t=t.position,e=0,n=l.length;e<n;++e){for(u=[],i=0,a=l[e].length;i<a;++i)r=l[e][i],s="last"===t?l[e][a-1]:"mid"===t?l[e][a/2]:t>=0&&t<a?l[e][t]:r,u.push(100*(r-s)/s);h.push(u)}else for(t=t.relposition,e=0,n=l.length;e<n;++e){for(u=[],i=0,a=l[e].length;i<a;++i)r=l[e][i],s=i+t>=0&&i+t<a?l[e][i+t]:r,u.push(100*(r-s)/s);h.push(u)}else for(s=+t,e=0,n=l.length;e<n;++e){for(u=[],i=0,a=l[e].length;i<a;++i)r=l[e][i],u.push(100*(r-s)/s);h.push(u)}for(e=0,n=h.length;e<n;++e)for(i=0,a=h[e].length;i<a;++i)Number.isFinite(h[e][i])||(h[e][i]=null);var p=function(t){return+(Math.round(t+"e+2")+"e-2")};for(e=0,n=h.length;e<n;++e)for(i=0,a=h[e].length;i<a;++i)h[e][i]=p(h[e][i]);for(e=h.length;e--;)for(i=h[e].length;i--;)c=parseInt(100*h[e][i]),h[e][i]=c/100;return h}}]),t}(),r={Minimum:function(t){return t.reduce(function(t,e){return t>e?e:t})},Maximum:function(t){return t.reduce(function(t,e){return t<e?e:t})},Mean:function(t){return t.reduce(function(t,e){return t+e})/t.length},Median:function(t){return t.map(function(t){return t}).sort(function(t,e){return t-e})[t.length/2]},"Standard Deviation":function(t){function e(t){var e,n;return e=t.reduce(function(t,e){return t+e},0),n=e/t.length}var n=0,i=0,a=0,r=0,o=0,s=0;return n=e(t),i=t.map(function(t){return s=t-n,a=s*s}),r=e(i),o=Math.sqrt(r)}};t.exports=a}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZ3Jvd3RoLWFuYWx5c2VyLWVzNS5taW4uanMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIDY5YjY0YTRlMGE5ZGFlMDY2MjQzIiwid2VicGFjazovLy8uL3NyYy9leHRlbnNpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dyb3d0aGFuYWx5c2VyLmpzIl0sIm5hbWVzIjpbIm1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpbnN0YWxsZWRNb2R1bGVzIiwiZXhwb3J0cyIsIm1vZHVsZSIsImlkIiwibG9hZGVkIiwiY2FsbCIsIm0iLCJjIiwicCIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJpIiwibGVuZ3RoIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5Iiwia2V5IiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwicHJvdG90eXBlIiwiR3Jvd3RoQW5hbHlzZXIiLCJGdXNpb25DaGFydHMiLCJyZWdpc3RlciIsIkdyb3d0aEFuYWx5c2VyRXh0IiwidGhpcyIsInRvb2xib3giLCJnZXRDb21wb25lbnQiLCJIb3Jpem9udGFsVG9vbGJhciIsIkNvbXBvbmVudEdyb3VwIiwiU3ltYm9sU3RvcmUiLCJ3aW5kb3ciLCJhIiwidmFsdWUiLCJjaGFydEluc3RhbmNlIiwidHNPYmplY3QiLCJjb21wb25lbnRTdG9yZSIsImFwaUluc3RhbmNlIiwiZ2V0Q29tcG9uZW50U3RvcmUiLCJnZXRDYW52YXNCeUluZGV4IiwiZ2V0Q29tcG9zaXRpb24iLCJQbG90TWFuYWdlciIsInBsb3QiLCJtb2RlIiwiZ2EiLCJzdG9yZSIsImNhbnZhcyIsImNvbXAiLCJkcyIsImRhdGFzZXQiLCJpZE1hcCIsInN0b3JlQXIiLCJuU3RvcmVBcnIiLCJ5QXhpcyIsImNvbXBvc2l0aW9uIiwiZ2V0U2NhbGVPYmoiLCJnZXRJbnRlcnZhbE9iaiIsImdldENvbmZpZyIsIm1ham9yIiwiZm9ybWF0dGVyIiwidmFsIiwiZm9yRWFjaFNlcmllcyIsImIiLCJzZXJpZXMiLCJnZXRJZCIsImdldE9yaWdpbmFsRGF0YSIsInB1c2giLCJnQW5hbHlzZXIiLCJhbmFseXNlIiwic2V0RGF0YUJ5U2VyaWVzIiwic2V0T3JpZ2luYWxEYXRhIiwiaW1wbCIsInVwZGF0ZSIsInJlcXVpcmUiLCJ4QXhpcyIsImdyYXBoaWNzIiwiY2hhcnQiLCJwbG90TWFuYWdlciIsImNhbnZhc0NvbmZpZyIsIm1hcmtlck1hbmFnZXIiLCJyZWFjdGl2ZU1vZGVsIiwiZ2xvYmFsUmVhY3RpdmVNb2RlbCIsInNwYWNlTWFuYWdlckluc3RhbmNlIiwic21hcnRMYWJlbCIsImV4dERhdGEiLCJjYW52YXNEYXRhIiwic3RhcnREdCIsIm1vZGVsIiwiZW5kRHQiLCJzdGFydERhdGFzZXQiLCJlbmREYXRhc2V0IiwidG9vbGJhcnMiLCJtZWFzdXJlbWVudCIsImNyZWF0ZVRvb2xiYXIiLCJ0b29sYmFyIiwiZ3JvdXAiLCJjb250ZXh0TWVudSIsInBvcHVwIiwic2VsZiIsImNvbnRleHRBcnJheSIsImdhT3B0aW9uc09iaiIsInBhcGVyIiwiY2hhcnRDb250YWluZXIiLCJjb250YWluZXIiLCJzdWJDYXRTdHlsZSIsImZvbnQtc2l6ZSIsImNvbG9yIiwiZm9udC1mYW1pbHkiLCJjYXRTdHlsZSIsImZvbnRXZWlnaHQiLCJzZXRDb25maWciLCJmaWxsIiwiYm9yZGVyVGhpY2tuZXNzIiwiRmlyc3QgSW5kZXgiLCJwb3NpdGlvbiIsIlByZXZpb3VzIEluZGV4IiwicmVscG9zaXRpb24iLCJTcGVjaWZpYyBWYWx1ZSIsInN1Ym1lbnUiLCJNaW5pbXVtIiwiTWF4aW11bSIsIk1lYW4iLCJNZWRpYW4iLCJTdGFuZGFyZCBEZXZpYXRpb24iLCJDdXN0b20gVmFsdWUuLi4iLCJhbmFseXNlciIsIlN5bWJvbFdpdGhDb250ZXh0Iiwid2lkdGgiLCJoZWlnaHQiLCJzdHJva2UiLCJzdHJva2VXaWR0aCIsInJhZGl1cyIsInN5bWJvbFN0cm9rZSIsInN5bWJvbFN0cm9rZVdpZHRoIiwiR3Jvd3RoIEFuYWx5c2VyIiwic3R5bGUiLCJjYWxsYmFjayIsImFwcGx5VmFsdWUiLCJib3giLCJoaWRlIiwiaW5wdXRGaWVsZCIsImlucHV0RmllbGROdW1iZXJIYW5kbGVyIiwiZWxlbWVudCIsInJlcGxhY2UiLCJoZWFkZXIiLCJoZWFkZXJUZXh0IiwiY3Jvc3MiLCJhcHBseUJ1dHRvbiIsImZvbnRTaXplIiwibGluZUhlaWdodCIsInN0cm9rZS13aWR0aCIsImhlYWRlcldpZHRoIiwieCIsInkiLCJodG1sIiwiYXR0ciIsInRleHQiLCJmbG9hdCIsImN1cnNvciIsIm9uIiwiZSIsImtleUNvZGUiLCJmb2N1cyIsImFkZEV2ZW50TGlzdGVuZXIiLCJfbG9vcCIsIm9iaiIsInN1Yk9iaiIsImFjdGlvbiIsImhhbmRsZXIiLCJfbG9vcDIiLCJqIiwic3ViTWVudU5hbWUiLCJzdWJNZW51VmFsdWUiLCJpbmRleE9mIiwiIiwiYmFja2dyb3VuZENvbG9yIiwibWFyZ2luIiwicGFkZGluZyIsIiZuYnNwOyAmbmJzcDsgUmVzZXQgVmlldyIsImFwcGVuZEFzTGlzdCIsInBvc3giLCJwb3N5IiwicmFkIiwiciIsInNwYWNlIiwiTWF0aCIsInJvdW5kIiwiaGFsZldpZHRoIiwic3RhcnRYIiwiZW5kWCIsInN0YXJ0WSIsImVuZFkiLCJhZGRTeW1ib2wiLCJhZGRDb21wb25lbnQiLCJhdmFpbGFibGVXaWR0aCIsImF2YWlsYWJsZUhlaWdodCIsImxvZ2ljYWxTcGFjZSIsImxuIiwiZ2V0TG9naWNhbFNwYWNlIiwibWF4IiwiYWRkIiwibmFtZSIsInJlZiIsInByaW9yaXR5IiwibGF5b3V0IiwiaW5saW5lIiwib3JpZW50YXRpb24iLCJ0eXBlIiwiaG9yaXpvbnRhbCIsInRvcCIsImFsaWdubWVudCIsInJpZ2h0IiwiZGltZW5zaW9ucyIsInBhcmVudCIsImdldFBhcmVudENvbXBvbmVudEdyb3VwIiwiZ2V0V2lkdGgiLCJnZXRIZWlnaHQiLCJtZXMiLCJwYXJlbnRHcm91cCIsInVuZGVmaW5lZCIsImRyYXciLCJyZWdpc3RlckNvbXBvbmVudCIsImRhdGEiLCJtYXAiLCJGb3JtdWxhZSIsImlpIiwiamoiLCJudW0iLCJjaGVja0FyciIsImNoZWNrTnVtIiwiZGF0YUFyIiwibkRhdGFBciIsInRlbXBBciIsInRlbXAiLCJ0b0xvd2VyQ2FzZSIsImlzTmFOIiwicmVsZGF0YXNldHBvc2l0aW9uIiwiTnVtYmVyIiwiaXNGaW5pdGUiLCJyb3VuZFRvVHdvIiwicGFyc2VJbnQiLCJhcnIiLCJyZWR1Y2UiLCJzb3J0IiwidmFsdWVzIiwiYXZlcmFnZSIsInN1bSIsImF2ZyIsInNxdWFyZURpZmZzIiwic3FyRGlmZiIsImF2Z1NxdWFyZURpZmYiLCJzdGREZXYiLCJkaWZmIiwic3FydCJdLCJtYXBwaW5ncyI6IkNBQVMsU0FBVUEsR0NJbkIsUUFBQUMsR0FBQUMsR0FHQSxHQUFBQyxFQUFBRCxHQUNBLE1BQUFDLEdBQUFELEdBQUFFLE9BR0EsSUFBQUMsR0FBQUYsRUFBQUQsSUFDQUUsV0FDQUUsR0FBQUosRUFDQUssUUFBQSxFQVVBLE9BTkFQLEdBQUFFLEdBQUFNLEtBQUFILEVBQUFELFFBQUFDLElBQUFELFFBQUFILEdBR0FJLEVBQUFFLFFBQUEsRUFHQUYsRUFBQUQsUUF2QkEsR0FBQUQsS0FxQ0EsT0FUQUYsR0FBQVEsRUFBQVQsRUFHQUMsRUFBQVMsRUFBQVAsRUFHQUYsRUFBQVUsRUFBQSxHQUdBVixFQUFBLEtETU0sU0FBU0ksRUFBUUQsRUFBU0gsR0FFL0IsWUFJQSxTQUFTVyxHQUFnQkMsRUFBVUMsR0FBZSxLQUFNRCxZQUFvQkMsSUFBZ0IsS0FBTSxJQUFJQyxXQUFVLHFDQUZoSCxHQUFJQyxHQUFlLFdBQWMsUUFBU0MsR0FBaUJDLEVBQVFDLEdBQVMsSUFBSyxHQUFJ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LFFBQVMsU0FBQ3lILEdBQ1IsTUFBT0EsR0FBSUMsT0FBTyxTQUFDbE4sRUFBRzhCLEdBQ3BCLE1BQU85QixHQUFJOEIsRUFBSUEsRUFBSTlCLEtBR3ZCeUYsS0FBTSxTQUFDd0gsR0FDTCxNQUFPQSxHQUFJQyxPQUFPLFNBQUNsTixFQUFHOEIsR0FDcEIsTUFBTzlCLEdBQUk4QixJQUNSbUwsRUFBSXZPLFFBRVhnSCxPQUFRLFNBQUN1SCxHQUNQLE1BQU9BLEdBQUlsQixJQUFJLFNBQUMvTCxHQUFELE1BQU9BLEtBQUdtTixLQUFLLFNBQUNuTixFQUFHOEIsR0FBUSxNQUFPOUIsR0FBSThCLElBQU1tTCxFQUFJdk8sT0FBUyxJQUUxRWlILHFCQUFzQixTQUFDeUgsR0FDckIsUUFBU0MsR0FBU3ZCLEdBQ2hCLEdBQUl3QixHQUFLQyxDQU1ULE9BTEFELEdBQU14QixFQUFLb0IsT0FBTyxTQUFVSSxFQUFLck4sR0FDL0IsTUFBT3FOLEdBQU1yTixHQUNaLEdBRUhzTixFQUFNRCxFQUFNeEIsRUFBS3BOLE9BR25CLEdBQUk2TyxHQUFNLEVBQ1JDLEVBQWMsRUFDZEMsRUFBVSxFQUNWQyxFQUFnQixFQUNoQkMsRUFBUyxFQUNUQyxFQUFPLENBU1QsT0FSQUwsR0FBTUYsRUFBUUQsR0FDZEksRUFBY0osRUFBT3JCLElBQUksU0FBVTlMLEdBR2pDLE1BRkEyTixHQUFPM04sRUFBUXNOLEVBQ2ZFLEVBQVVHLEVBQU9BLElBR25CRixFQUFnQkwsRUFBUUcsR0FDeEJHLEVBQVNsRSxLQUFLb0UsS0FBS0gsSUFLdkJoUSxHQUFPRCxRQUFVNEIiLCJmaWxlIjoiZ3Jvd3RoLWFuYWx5c2VyLWVzNS5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fSxcbi8qKioqKiovIFx0XHRcdGlkOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGxvYWRlZDogZmFsc2Vcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXHRcblx0dmFyIEdyb3d0aEFuYWx5c2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0XG5cdEZ1c2lvbkNoYXJ0cy5yZWdpc3RlcignZXh0ZW5zaW9uJywgWydwcml2YXRlJywgJ2dyb3d0aC1hbmFseXNlci1leHQnLCBmdW5jdGlvbiAoKSB7XG5cdCAgdmFyIEdyb3d0aEFuYWx5c2VyRXh0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gR3Jvd3RoQW5hbHlzZXJFeHQoKSB7XG5cdCAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBHcm93dGhBbmFseXNlckV4dCk7XG5cdFxuXHQgICAgICB0aGlzLnRvb2xib3ggPSBGdXNpb25DaGFydHMuZ2V0Q29tcG9uZW50KCdhcGknLCAndG9vbGJveCcpO1xuXHQgICAgICB0aGlzLkhvcml6b250YWxUb29sYmFyID0gdGhpcy50b29sYm94Lkhvcml6b250YWxUb29sYmFyO1xuXHQgICAgICB0aGlzLkNvbXBvbmVudEdyb3VwID0gdGhpcy50b29sYm94LkNvbXBvbmVudEdyb3VwO1xuXHQgICAgICB0aGlzLlN5bWJvbFN0b3JlID0gdGhpcy50b29sYm94LlN5bWJvbFN0b3JlO1xuXHQgICAgICB3aW5kb3cuYSA9IHRoaXM7XG5cdCAgICB9XG5cdFxuXHQgICAgX2NyZWF0ZUNsYXNzKEdyb3d0aEFuYWx5c2VyRXh0LCBbe1xuXHQgICAgICBrZXk6ICdyZW5kZXJDaGFuZ2UnLFxuXHQgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyQ2hhbmdlKCkge1xuXHQgICAgICAgIHZhciBjaGFydEluc3RhbmNlID0gdGhpcy50c09iamVjdC5jaGFydEluc3RhbmNlLFxuXHQgICAgICAgICAgICBjb21wb25lbnRTdG9yZSA9IGNoYXJ0SW5zdGFuY2UuYXBpSW5zdGFuY2UuZ2V0Q29tcG9uZW50U3RvcmUoKSxcblx0ICAgICAgICAgICAgaSA9IDA7XG5cdCAgICAgICAgZm9yIChpID0gMDsgY29tcG9uZW50U3RvcmUuZ2V0Q2FudmFzQnlJbmRleChpKTsgKytpKSB7XG5cdCAgICAgICAgICBjb21wb25lbnRTdG9yZS5nZXRDYW52YXNCeUluZGV4KGkpLmdldENvbXBvc2l0aW9uKCkuUGxvdE1hbmFnZXIucGxvdCgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICBrZXk6ICdhbmFseXNlcicsXG5cdCAgICAgIHZhbHVlOiBmdW5jdGlvbiBhbmFseXNlcihtb2RlKSB7XG5cdCAgICAgICAgdmFyIGdhID0gdGhpcy5nYSB8fCB7fSxcblx0ICAgICAgICAgICAgc3RvcmUgPSB0aGlzLnRzT2JqZWN0LmFwaUluc3RhbmNlLmdldENvbXBvbmVudFN0b3JlKCksXG5cdCAgICAgICAgICAgIGNhbnZhcyA9IHN0b3JlLmdldENhbnZhc0J5SW5kZXgoMCksXG5cdCAgICAgICAgICAgIGNvbXAgPSBjYW52YXMuZ2V0Q29tcG9zaXRpb24oKSxcblx0ICAgICAgICAgICAgZHMgPSBnYS5kcyB8fCBjb21wLmRhdGFzZXQsXG5cdCAgICAgICAgICAgIGksXG5cdCAgICAgICAgICAgIGlkTWFwID0gZ2EuaWRNYXAgfHwge30sXG5cdCAgICAgICAgICAgIHN0b3JlQXIgPSBnYS5zdG9yZUFyIHx8IFtdLFxuXHQgICAgICAgICAgICBuU3RvcmVBcnIgPSBbXSxcblx0ICAgICAgICAgICAgeUF4aXMgPSBjYW52YXMuY29tcG9zaXRpb24ueUF4aXM7XG5cdCAgICAgICAgLy8gQ2hhbmdpbmcgeSBBeGlzIGZvcm1hdHRvclxuXHQgICAgICAgIGlmIChtb2RlID09PSAncmVzZXQnKSB7XG5cdCAgICAgICAgICB5QXhpcy5nZXRTY2FsZU9iaigpLmdldEludGVydmFsT2JqKCkuZ2V0Q29uZmlnKCdpbnRlcnZhbHMnKS5tYWpvci5mb3JtYXR0ZXIgPSBmdW5jdGlvbiAodmFsKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB2YWw7XG5cdCAgICAgICAgICB9O1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICB5QXhpcy5nZXRTY2FsZU9iaigpLmdldEludGVydmFsT2JqKCkuZ2V0Q29uZmlnKCdpbnRlcnZhbHMnKS5tYWpvci5mb3JtYXR0ZXIgPSBmdW5jdGlvbiAodmFsKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB2YWwgKyAnJSc7XG5cdCAgICAgICAgICB9O1xuXHQgICAgICAgIH1cblx0ICAgICAgICAvLyBEZWNsYXJhdGlvbiBlbmRzXG5cdCAgICAgICAgdGhpcy5nYSA9IGdhO1xuXHQgICAgICAgIGlmICghZ2Euc3RvcmVBcikge1xuXHQgICAgICAgICAgc3RvcmUgPSB7fTtcblx0ICAgICAgICAgIGlmICghZ2EuaWRNYXApIHtcblx0ICAgICAgICAgICAgZHMuZm9yRWFjaFNlcmllcyhmdW5jdGlvbiAoYSwgYiwgYywgc2VyaWVzKSB7XG5cdCAgICAgICAgICAgICAgc3RvcmVbc2VyaWVzLmdldElkKCldID0gc2VyaWVzLmdldE9yaWdpbmFsRGF0YSgpO1xuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgZm9yIChpIGluIHN0b3JlKSB7XG5cdCAgICAgICAgICAgICAgc3RvcmVBci5wdXNoKHN0b3JlW2ldKTtcblx0ICAgICAgICAgICAgICBpZE1hcFtpXSA9IHN0b3JlQXIubGVuZ3RoIC0gMTtcblx0ICAgICAgICAgICAgICAvLyA9IHN0b3JlW2ldLm1hcChmdW5jdGlvbiAoZSkgeyByZXR1cm4gMjAgKiBlICsgKE1hdGgucmFuZG9tKCkgKiAxMDAwKTsgfSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZ2EuaWRNYXAgPSBpZE1hcDtcblx0ICAgICAgICAgICAgZ2EuZHMgPSBkcztcblx0ICAgICAgICAgICAgZ2Euc3RvcmVBciA9IHN0b3JlQXI7XG5cdCAgICAgICAgICAgIGdhLmdBbmFseXNlciA9IG5ldyBHcm93dGhBbmFseXNlcihzdG9yZUFyKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgblN0b3JlQXJyID0gZ2EuZ0FuYWx5c2VyLmFuYWx5c2UobW9kZSk7XG5cdCAgICAgICAgZHMuc2V0RGF0YUJ5U2VyaWVzKGZ1bmN0aW9uIChzZXJpZXMpIHtcblx0ICAgICAgICAgIGlmIChuU3RvcmVBcnIubGVuZ3RoKSB7XG5cdCAgICAgICAgICAgIHNlcmllcy5zZXRPcmlnaW5hbERhdGEoblN0b3JlQXJyW2lkTWFwW3Nlcmllcy5nZXRJZCgpXV0pO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIGNvbXAuaW1wbC51cGRhdGUoKTtcblx0ICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICBrZXk6ICdpbml0Jyxcblx0ICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluaXQocmVxdWlyZSkge1xuXHQgICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXM7XG5cdCAgICAgICAgcmVxdWlyZShbJ3hBeGlzJywgJ3lBeGlzJywgJ2dyYXBoaWNzJywgJ2NoYXJ0JywgJ2RhdGFzZXQnLCAnUGxvdE1hbmFnZXInLCAnY2FudmFzQ29uZmlnJywgJ01hcmtlck1hbmFnZXInLCAncmVhY3RpdmVNb2RlbCcsICdnbG9iYWxSZWFjdGl2ZU1vZGVsJywgJ3NwYWNlTWFuYWdlckluc3RhbmNlJywgJ3NtYXJ0TGFiZWwnLCAnY2hhcnRJbnN0YW5jZScsICdleHREYXRhJywgJ2NhbnZhc0RhdGEnLCBmdW5jdGlvbiAoeEF4aXMsIHlBeGlzLCBncmFwaGljcywgY2hhcnQsIGRhdGFzZXQsIHBsb3RNYW5hZ2VyLCBjYW52YXNDb25maWcsIG1hcmtlck1hbmFnZXIsIHJlYWN0aXZlTW9kZWwsIGdsb2JhbFJlYWN0aXZlTW9kZWwsIHNwYWNlTWFuYWdlckluc3RhbmNlLCBzbWFydExhYmVsLCBjaGFydEluc3RhbmNlLCBleHREYXRhLCBjYW52YXNEYXRhKSB7XG5cdCAgICAgICAgICBpbnN0YW5jZS54QXhpcyA9IHhBeGlzO1xuXHQgICAgICAgICAgaW5zdGFuY2UueUF4aXMgPSB5QXhpcztcblx0ICAgICAgICAgIGluc3RhbmNlLmdyYXBoaWNzID0gZ3JhcGhpY3M7XG5cdCAgICAgICAgICBpbnN0YW5jZS5jaGFydCA9IGNoYXJ0O1xuXHQgICAgICAgICAgaW5zdGFuY2UuZGF0YXNldCA9IGRhdGFzZXQ7XG5cdCAgICAgICAgICBpbnN0YW5jZS5wbG90TWFuYWdlciA9IHBsb3RNYW5hZ2VyO1xuXHQgICAgICAgICAgaW5zdGFuY2UubWFya2VyTWFuYWdlciA9IG1hcmtlck1hbmFnZXI7XG5cdCAgICAgICAgICBpbnN0YW5jZS5jYW52YXNDb25maWcgPSBjYW52YXNDb25maWc7XG5cdCAgICAgICAgICBpbnN0YW5jZS5yZWFjdGl2ZU1vZGVsID0gcmVhY3RpdmVNb2RlbDtcblx0ICAgICAgICAgIGluc3RhbmNlLmdsb2JhbFJlYWN0aXZlTW9kZWwgPSBnbG9iYWxSZWFjdGl2ZU1vZGVsO1xuXHQgICAgICAgICAgaW5zdGFuY2Uuc3BhY2VNYW5hZ2VySW5zdGFuY2UgPSBzcGFjZU1hbmFnZXJJbnN0YW5jZTtcblx0ICAgICAgICAgIGluc3RhbmNlLnNtYXJ0TGFiZWwgPSBzbWFydExhYmVsO1xuXHQgICAgICAgICAgaW5zdGFuY2UuY2hhcnRJbnN0YW5jZSA9IGNoYXJ0SW5zdGFuY2U7XG5cdCAgICAgICAgICBpbnN0YW5jZS5jYW52YXNEYXRhID0gY2FudmFzRGF0YTtcblx0ICAgICAgICAgIGluc3RhbmNlLmV4dERhdGEgPSBleHREYXRhO1xuXHQgICAgICAgIH1dKTtcblx0ICAgICAgICAvLyAgY29uc29sZS5sb2coaW5zdGFuY2UuZXh0RGF0YSk7XG5cdCAgICAgICAgdGhpcy5zcGFjZU1hbmFnZXJJbnN0YW5jZSA9IGluc3RhbmNlLnNwYWNlTWFuYWdlckluc3RhbmNlO1xuXHQgICAgICAgIHRoaXMuZ2xvYmFsUmVhY3RpdmVNb2RlbCA9IGluc3RhbmNlLmdsb2JhbFJlYWN0aXZlTW9kZWw7XG5cdCAgICAgICAgdGhpcy50c09iamVjdCA9IGluc3RhbmNlLmNoYXJ0SW5zdGFuY2U7XG5cdCAgICAgICAgdGhpcy5zdGFydER0ID0gaW5zdGFuY2UuZ2xvYmFsUmVhY3RpdmVNb2RlbC5tb2RlbFsneC1heGlzLXZpc2libGUtcmFuZ2Utc3RhcnQnXTtcblx0ICAgICAgICB0aGlzLmVuZER0ID0gaW5zdGFuY2UuZ2xvYmFsUmVhY3RpdmVNb2RlbC5tb2RlbFsneC1heGlzLXZpc2libGUtcmFuZ2UtZW5kJ107XG5cdCAgICAgICAgdGhpcy5zdGFydERhdGFzZXQgPSBpbnN0YW5jZS5nbG9iYWxSZWFjdGl2ZU1vZGVsLm1vZGVsWyd4LWF4aXMtYWJzb2x1dGUtcmFuZ2Utc3RhcnQnXTtcblx0ICAgICAgICB0aGlzLmVuZERhdGFzZXQgPSBpbnN0YW5jZS5nbG9iYWxSZWFjdGl2ZU1vZGVsLm1vZGVsWyd4LWF4aXMtYWJzb2x1dGUtcmFuZ2UtZW5kJ107XG5cdCAgICAgICAgdGhpcy50b29sYmFycyA9IFtdO1xuXHQgICAgICAgIHRoaXMubWVhc3VyZW1lbnQgPSB7fTtcblx0ICAgICAgICB0aGlzLnRvb2xiYXJzLnB1c2godGhpcy5jcmVhdGVUb29sYmFyKCkpO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgIGtleTogJ2NyZWF0ZVRvb2xiYXInLFxuXHQgICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlVG9vbGJhcigpIHtcblx0ICAgICAgICB2YXIgdG9vbGJhcixcblx0ICAgICAgICAgICAgZ3JvdXAsXG5cdCAgICAgICAgICAgIHNlbGYgPSB0aGlzLFxuXHQgICAgICAgICAgICBjb250ZXh0TWVudSxcblx0ICAgICAgICAgICAgY29udGV4dEFycmF5ID0gW10sXG5cdCAgICAgICAgICAgIGdhT3B0aW9uc09iaiA9IHt9LFxuXHQgICAgICAgICAgICBwb3B1cCxcblx0ICAgICAgICAgICAgcGFwZXIgPSB0aGlzLmdyYXBoaWNzLnBhcGVyLFxuXHQgICAgICAgICAgICBjaGFydENvbnRhaW5lciA9IHRoaXMuZ3JhcGhpY3MuY29udGFpbmVyLFxuXHQgICAgICAgICAgICBzdWJDYXRTdHlsZSA9IHtcblx0ICAgICAgICAgICdmb250LXNpemUnOiAnMTJweCcsXG5cdCAgICAgICAgICAnY29sb3InOiAnIzRiNGI0YicsXG5cdCAgICAgICAgICAnZm9udC1mYW1pbHknOiAnXCJMdWNpZGEgR3JhbmRlXCIsIFNhbnMtc2VyaWYnXG5cdCAgICAgICAgfSxcblx0ICAgICAgICAgICAgY2F0U3R5bGUgPSB7XG5cdCAgICAgICAgICAnZm9udC1zaXplJzogJzEzcHgnLFxuXHQgICAgICAgICAgJ2NvbG9yJzogJyM0YjRiNGInLFxuXHQgICAgICAgICAgJ2ZvbnQtZmFtaWx5JzogJ1wiTHVjaWRhIEdyYW5kZVwiLCBTYW5zLXNlcmlmJyxcblx0ICAgICAgICAgICdmb250V2VpZ2h0JzogJ2JvbGQnXG5cdCAgICAgICAgfTtcblx0XG5cdCAgICAgICAgdG9vbGJhciA9IG5ldyB0aGlzLkhvcml6b250YWxUb29sYmFyKHtcblx0ICAgICAgICAgIHBhcGVyOiB0aGlzLmdyYXBoaWNzLnBhcGVyLFxuXHQgICAgICAgICAgY2hhcnQ6IHRoaXMuY2hhcnQsXG5cdCAgICAgICAgICBzbWFydExhYmVsOiB0aGlzLnNtYXJ0TGFiZWwsXG5cdCAgICAgICAgICBjaGFydENvbnRhaW5lcjogdGhpcy5ncmFwaGljcy5jb250YWluZXJcblx0ICAgICAgICB9KTtcblx0XG5cdCAgICAgICAgdG9vbGJhci5zZXRDb25maWcoe1xuXHQgICAgICAgICAgZmlsbDogJyNmZmYnLFxuXHQgICAgICAgICAgYm9yZGVyVGhpY2tuZXNzOiAwXG5cdCAgICAgICAgfSk7XG5cdFxuXHQgICAgICAgIGdyb3VwID0gbmV3IHRoaXMudG9vbGJveC5Db21wb25lbnRHcm91cCh7XG5cdCAgICAgICAgICBwYXBlcjogdGhpcy5ncmFwaGljcy5wYXBlcixcblx0ICAgICAgICAgIGNoYXJ0OiB0aGlzLmNoYXJ0LFxuXHQgICAgICAgICAgc21hcnRMYWJlbDogdGhpcy5zbWFydExhYmVsLFxuXHQgICAgICAgICAgY2hhcnRDb250YWluZXI6IHRoaXMuZ3JhcGhpY3MuY29udGFpbmVyXG5cdCAgICAgICAgfSk7XG5cdFxuXHQgICAgICAgIGdyb3VwLnNldENvbmZpZyh7XG5cdCAgICAgICAgICBmaWxsOiAnI2ZmZicsXG5cdCAgICAgICAgICBib3JkZXJUaGlja25lc3M6IDBcblx0ICAgICAgICB9KTtcblx0XG5cdCAgICAgICAgZ2FPcHRpb25zT2JqID0ge1xuXHQgICAgICAgICAgJ0ZpcnN0IEluZGV4JzogeyBwb3NpdGlvbjogMCB9LFxuXHQgICAgICAgICAgJ1ByZXZpb3VzIEluZGV4JzogeyByZWxwb3NpdGlvbjogLTEgfSxcblx0ICAgICAgICAgICdTcGVjaWZpYyBWYWx1ZSc6IHtcblx0ICAgICAgICAgICAgJ3N1Ym1lbnUnOiB0cnVlLFxuXHQgICAgICAgICAgICAnTWluaW11bSc6ICdNaW5pbXVtJyxcblx0ICAgICAgICAgICAgJ01heGltdW0nOiAnTWF4aW11bScsXG5cdCAgICAgICAgICAgICdNZWFuJzogJ01lYW4nLFxuXHQgICAgICAgICAgICAnTWVkaWFuJzogJ01lZGlhbicsXG5cdCAgICAgICAgICAgICdTdGFuZGFyZCBEZXZpYXRpb24nOiAnU3RhbmRhcmQgRGV2aWF0aW9uJyxcblx0ICAgICAgICAgICAgJ0N1c3RvbSBWYWx1ZS4uLic6IGZ1bmN0aW9uIEN1c3RvbVZhbHVlKCkge1xuXHQgICAgICAgICAgICAgIHBvcHVwKGZ1bmN0aW9uICh2YWwpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLmFuYWx5c2VyKHZhbCk7XG5cdCAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9O1xuXHRcblx0ICAgICAgICBjb250ZXh0TWVudSA9IG5ldyB0aGlzLnRvb2xib3guU3ltYm9sV2l0aENvbnRleHQoJ0NvbnRleHRJY29uJywge1xuXHQgICAgICAgICAgcGFwZXI6IHRoaXMuZ3JhcGhpY3MucGFwZXIsXG5cdCAgICAgICAgICBjaGFydDogdGhpcy5jaGFydCxcblx0ICAgICAgICAgIHNtYXJ0TGFiZWw6IHRoaXMuc21hcnRMYWJlbCxcblx0ICAgICAgICAgIGNoYXJ0Q29udGFpbmVyOiB0aGlzLmdyYXBoaWNzLmNvbnRhaW5lclxuXHQgICAgICAgIH0sIHtcblx0ICAgICAgICAgIHdpZHRoOiAyNCxcblx0ICAgICAgICAgIGhlaWdodDogMjQsXG5cdCAgICAgICAgICBwb3NpdGlvbjogJ3JpZ2h0Jyxcblx0ICAgICAgICAgIHN0cm9rZTogJyNjZWQ1ZDQnLFxuXHQgICAgICAgICAgc3Ryb2tlV2lkdGg6ICcxJyxcblx0ICAgICAgICAgIHJhZGl1czogJzEnLFxuXHQgICAgICAgICAgc3ltYm9sU3Ryb2tlOiAnIzY5Njk2OScsXG5cdCAgICAgICAgICBzeW1ib2xTdHJva2VXaWR0aDogJzInXG5cdCAgICAgICAgfSk7XG5cdFxuXHQgICAgICAgIGNvbnRleHRBcnJheS5wdXNoKHtcblx0ICAgICAgICAgICdHcm93dGggQW5hbHlzZXInOiB7XG5cdCAgICAgICAgICAgIHN0eWxlOiBjYXRTdHlsZVxuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHBvcHVwID0gZnVuY3Rpb24gcG9wdXAoY2FsbGJhY2spIHtcblx0ICAgICAgICAgIHZhciBib3gsXG5cdCAgICAgICAgICAgICAgaGVhZGVyLFxuXHQgICAgICAgICAgICAgIHN0eWxlID0ge1xuXHQgICAgICAgICAgICBmb250U2l6ZTogMTAgKyAncHgnLFxuXHQgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxNSArICdweCcsXG5cdCAgICAgICAgICAgICdmb250LWZhbWlseSc6ICdcIkx1Y2lkYSBHcmFuZGVcIiwgU2Fucy1zZXJpZicsXG5cdCAgICAgICAgICAgIHN0cm9rZTogJyM2NzY3NjcnLFxuXHQgICAgICAgICAgICAnc3Ryb2tlLXdpZHRoJzogJzInXG5cdCAgICAgICAgICB9LFxuXHQgICAgICAgICAgICAgIGhlYWRlcldpZHRoID0gMTgwLFxuXHQgICAgICAgICAgICAgIGhlYWRlclRleHQsXG5cdCAgICAgICAgICAgICAgY3Jvc3MsXG5cdCAgICAgICAgICAgICAgaW5wdXRGaWVsZCxcblx0ICAgICAgICAgICAgICBhcHBseUJ1dHRvbixcblx0ICAgICAgICAgICAgICB4ID0gc2VsZi5jaGFydC53aWR0aCAqIDAuNDcgLSA5MCxcblx0ICAgICAgICAgICAgICB5ID0gc2VsZi5jaGFydC5oZWlnaHQgLyAyIC0gNDA7XG5cdFxuXHQgICAgICAgICAgYm94ID0gcGFwZXIuaHRtbCgnZGl2Jywge1xuXHQgICAgICAgICAgICBmaWxsOiAnI2Y3ZjdmNycsXG5cdCAgICAgICAgICAgIHg6IHgsXG5cdCAgICAgICAgICAgIHk6IHksXG5cdCAgICAgICAgICAgIHdpZHRoOiAxODAsXG5cdCAgICAgICAgICAgIGhlaWdodDogODBcblx0ICAgICAgICAgIH0sIHN0eWxlLCBjaGFydENvbnRhaW5lcik7XG5cdFxuXHQgICAgICAgICAgaGVhZGVyID0gcGFwZXIuaHRtbCgnZGl2Jywge1xuXHQgICAgICAgICAgICBmaWxsOiAnI2U4ZThlOCcsXG5cdCAgICAgICAgICAgIHdpZHRoOiBoZWFkZXJXaWR0aCxcblx0ICAgICAgICAgICAgaGVpZ2h0OiAyMFxuXHQgICAgICAgICAgfSwgc3R5bGUsIGJveCk7XG5cdFxuXHQgICAgICAgICAgaGVhZGVyVGV4dCA9IHBhcGVyLmh0bWwoJ2RpdicsIHtcblx0ICAgICAgICAgICAgZmlsbDogJ3RyYW5zcGFyZW50Jyxcblx0ICAgICAgICAgICAgd2lkdGg6IGhlYWRlcldpZHRoICogMC42LFxuXHQgICAgICAgICAgICBoZWlnaHQ6IDIwLFxuXHQgICAgICAgICAgICB4OiAxMCxcblx0ICAgICAgICAgICAgeTogMlxuXHQgICAgICAgICAgfSwgc3R5bGUsIGhlYWRlcik7XG5cdFxuXHQgICAgICAgICAgaGVhZGVyVGV4dC5hdHRyKHtcblx0ICAgICAgICAgICAgdGV4dDogJ1Byb3ZpZGUgdmFsdWUnXG5cdCAgICAgICAgICB9KTtcblx0XG5cdCAgICAgICAgICBjcm9zcyA9IHBhcGVyLmh0bWwoJ2RpdicsIHtcblx0ICAgICAgICAgICAgZmlsbDogJ3RyYW5zcGFyZW50Jyxcblx0ICAgICAgICAgICAgd2lkdGg6IDEwLFxuXHQgICAgICAgICAgICBoZWlnaHQ6IDEwLFxuXHQgICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcblx0ICAgICAgICAgICAgZmxvYXQ6ICdyaWdodCcsXG5cdCAgICAgICAgICAgIHRleHQ6ICdYJyxcblx0ICAgICAgICAgICAgY3Vyc29yOiAncG9pbnRlcidcblx0ICAgICAgICAgIH0sIHN0eWxlLCBoZWFkZXIpO1xuXHRcblx0ICAgICAgICAgIGNyb3NzLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgYm94LmhpZGUoKTtcblx0ICAgICAgICAgIH0pO1xuXHRcblx0ICAgICAgICAgIGlucHV0RmllbGQgPSBwYXBlci5odG1sKCdpbnB1dCcsIHtcblx0ICAgICAgICAgICAgd2lkdGg6IDEwMCxcblx0ICAgICAgICAgICAgaGVpZ2h0OiAyMCxcblx0ICAgICAgICAgICAgeDogMTAsXG5cdCAgICAgICAgICAgIHk6IDMwXG5cdCAgICAgICAgICB9LCBzdHlsZSwgYm94KTtcblx0XG5cdCAgICAgICAgICBhcHBseUJ1dHRvbiA9IHBhcGVyLmh0bWwoJ2RpdicsIHtcblx0ICAgICAgICAgICAgd2lkdGg6IDUwLFxuXHQgICAgICAgICAgICBoZWlnaHQ6IDIwLFxuXHQgICAgICAgICAgICB4OiAxMjAsXG5cdCAgICAgICAgICAgIHk6IDMwLFxuXHQgICAgICAgICAgICBmaWxsOiAnIzU1NTU1NSdcblx0ICAgICAgICAgIH0sIHtcblx0ICAgICAgICAgICAgZm9udFNpemU6IDEwICsgJ3B4Jyxcblx0ICAgICAgICAgICAgbGluZUhlaWdodDogMTUgKyAncHgnLFxuXHQgICAgICAgICAgICAnZm9udC1mYW1pbHknOiAnXCJMdWNpZGEgR3JhbmRlXCIsIFNhbnMtc2VyaWYnLFxuXHQgICAgICAgICAgICBmaWxsOiAnI2VhZWFlYScsXG5cdCAgICAgICAgICAgIGNvbG9yOiAnI2VhZWFlYScsXG5cdCAgICAgICAgICAgIHN0cm9rZTogJyNlYWVhZWEnLFxuXHQgICAgICAgICAgICBjdXJzb3I6ICdwb2ludGVyJ1xuXHQgICAgICAgICAgfSwgYm94KTtcblx0XG5cdCAgICAgICAgICBmdW5jdGlvbiBhcHBseVZhbHVlKCkge1xuXHQgICAgICAgICAgICBib3guaGlkZSgpO1xuXHQgICAgICAgICAgICBjYWxsYmFjayhpbnB1dEZpZWxkLnZhbCgpKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIGFwcGx5QnV0dG9uLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgYXBwbHlWYWx1ZSgpO1xuXHQgICAgICAgICAgfSk7XG5cdCAgICAgICAgICBpbnB1dEZpZWxkLm9uKCdrZXl1cCcsIGZ1bmN0aW9uIChlKSB7XG5cdCAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT09IDEzKSB7XG5cdCAgICAgICAgICAgICAgYXBwbHlWYWx1ZSgpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9KTtcblx0ICAgICAgICAgIGFwcGx5QnV0dG9uLmF0dHIoe1xuXHQgICAgICAgICAgICB0ZXh0OiAnQXBwbHknXG5cdCAgICAgICAgICB9KTtcblx0ICAgICAgICAgIGlucHV0RmllbGQuZWxlbWVudC5mb2N1cygpO1xuXHQgICAgICAgICAgZnVuY3Rpb24gaW5wdXRGaWVsZE51bWJlckhhbmRsZXIoKSB7XG5cdCAgICAgICAgICAgIGlucHV0RmllbGQuZWxlbWVudC52YWx1ZSA9IGlucHV0RmllbGQuZWxlbWVudC52YWx1ZS5yZXBsYWNlKC9bXlxcZC4tXS9nLCAnJyk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBpbnB1dEZpZWxkLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBpbnB1dEZpZWxkTnVtYmVySGFuZGxlcik7XG5cdCAgICAgICAgICBjcm9zcy5lbGVtZW50LnN0eWxlWydwb3NpdGlvbiddID0gJ3JlbGF0aXZlJztcblx0ICAgICAgICAgIGNyb3NzLmVsZW1lbnQuc3R5bGVbJ2JhY2tncm91bmRDb2xvciddID0gJyNkMmQyZDInO1xuXHQgICAgICAgICAgY3Jvc3MuZWxlbWVudC5zdHlsZVsnYm9yZGVyJ10gPSAnMnB4IHNvbGlkICNjYmNiY2InO1xuXHQgICAgICAgICAgY3Jvc3MuZWxlbWVudC5zdHlsZVsncGFkZGluZyddID0gJzBweCAwcHggMy41cHggMnB4Jztcblx0ICAgICAgICAgIGNyb3NzLmVsZW1lbnQuc3R5bGVbJ2NvbG9yJ10gPSAnIzhjOGM4Yyc7XG5cdCAgICAgICAgICBjcm9zcy5lbGVtZW50LnN0eWxlWydtYXJnaW4nXSA9ICcxcHggMnB4Jztcblx0ICAgICAgICAgIGNyb3NzLmVsZW1lbnQuc3R5bGVbJ2Zsb2F0J10gPSAncmlnaHQnO1xuXHQgICAgICAgICAgaW5wdXRGaWVsZC5lbGVtZW50LnN0eWxlWydtYXJnaW5Ub3AnXSA9ICc4cHgnO1xuXHQgICAgICAgICAgaW5wdXRGaWVsZC5lbGVtZW50LnN0eWxlWydib3JkZXInXSA9ICcycHggc29saWQgI2RhZGJkYSc7XG5cdCAgICAgICAgICBhcHBseUJ1dHRvbi5lbGVtZW50LnN0eWxlWydtYXJnaW5Ub3AnXSA9ICc4cHgnO1xuXHQgICAgICAgICAgYm94LmVsZW1lbnQuc3R5bGVbJ2JvcmRlciddID0gJzFweCBzb2xpZCAjZDRkMmQzJztcblx0ICAgICAgICAgIGhlYWRlci5lbGVtZW50LnN0eWxlWydib3JkZXInXSA9ICcxcHggc29saWQgI2Q0ZDJkMyc7XG5cdCAgICAgICAgICBoZWFkZXIuZWxlbWVudC5zdHlsZVsnd2lkdGgnXSA9ICcxNzlweCc7XG5cdCAgICAgICAgICBoZWFkZXJUZXh0LmVsZW1lbnQuc3R5bGVbJ2ZvbnRTaXplJ10gPSAnMTEuNXB4Jztcblx0ICAgICAgICAgIGhlYWRlclRleHQuZWxlbWVudC5zdHlsZVsnbWFyZ2luVG9wJ10gPSAnMC41cHgnO1xuXHQgICAgICAgICAgaGVhZGVyVGV4dC5lbGVtZW50LnN0eWxlWydjb2xvciddID0gJyM2NzY3NjcnO1xuXHQgICAgICAgICAgaGVhZGVyLmVsZW1lbnQuc3R5bGVbJ2ZvbnQtZmFtaWx5J10gPSAnXCJMdWNpZGEgR3JhbmRlXCIsIFNhbnMtc2VyaWYnO1xuXHQgICAgICAgICAgYXBwbHlCdXR0b24uZWxlbWVudC5zdHlsZVsndGV4dEFsaWduJ10gPSAnY2VudGVyJztcblx0ICAgICAgICAgIGFwcGx5QnV0dG9uLmVsZW1lbnQuc3R5bGVbJ2ZvbnRTaXplJ10gPSAnMTFweCc7XG5cdCAgICAgICAgICBhcHBseUJ1dHRvbi5lbGVtZW50LnN0eWxlWydwYWRkaW5nVG9wJ10gPSAnM3B4Jztcblx0ICAgICAgICAgIGFwcGx5QnV0dG9uLmVsZW1lbnQuc3R5bGVbJ2JvcmRlclJhZGl1cyddID0gJzNweCc7XG5cdCAgICAgICAgICBhcHBseUJ1dHRvbi5lbGVtZW50LnN0eWxlWydjb2xvciddID0gJyNlNGU0ZTQnO1xuXHQgICAgICAgIH07XG5cdFxuXHQgICAgICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKGkpIHtcblx0ICAgICAgICAgIHZhciBrZXkgPSB2b2lkIDAsXG5cdCAgICAgICAgICAgICAgb2JqID0ge30sXG5cdCAgICAgICAgICAgICAgc3ViT2JqID0ge307XG5cdCAgICAgICAgICBpZiAoIWdhT3B0aW9uc09ialtpXS5zdWJtZW51KSB7XG5cdCAgICAgICAgICAgIGtleSA9ICcmbmJzcDsgJm5ic3A7ICcgKyBpO1xuXHQgICAgICAgICAgICBvYmpba2V5XSA9IHt9O1xuXHQgICAgICAgICAgICBvYmpba2V5XSA9IHtcblx0ICAgICAgICAgICAgICBzdHlsZTogc3ViQ2F0U3R5bGUsXG5cdCAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcigpIHtcblx0ICAgICAgICAgICAgICAgIHNlbGYuYW5hbHlzZXIoZ2FPcHRpb25zT2JqW2ldKTtcblx0ICAgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICAgIGFjdGlvbjogJ2NsaWNrJ1xuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAga2V5ID0gJyYjOTY2NiZuYnNwOyAnICsgaTtcblx0ICAgICAgICAgICAgb2JqW2tleV0gPSB7fTtcblx0ICAgICAgICAgICAgb2JqW2tleV0uYWN0aW9uID0gJ2NsaWNrJztcblx0ICAgICAgICAgICAgb2JqW2tleV0uc3R5bGUgPSBzdWJDYXRTdHlsZTtcblx0ICAgICAgICAgICAgb2JqW2tleV0uaGFuZGxlciA9IFtdO1xuXHRcblx0ICAgICAgICAgICAgdmFyIF9sb29wMiA9IGZ1bmN0aW9uIF9sb29wMihqKSB7XG5cdCAgICAgICAgICAgICAgdmFyIHN1Yk1lbnVOYW1lID0gaixcblx0ICAgICAgICAgICAgICAgICAgc3ViTWVudVZhbHVlID0gZ2FPcHRpb25zT2JqW2ldW2pdO1xuXHQgICAgICAgICAgICAgIGlmIChqID09PSAnc3VibWVudScpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiAnY29udGludWUnO1xuXHQgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICBzdWJPYmogPSB7fTtcblx0ICAgICAgICAgICAgICBzdWJPYmpbJyZuYnNwOycgKyBzdWJNZW51TmFtZV0gPSB7fTtcblx0ICAgICAgICAgICAgICBzdWJPYmpbJyZuYnNwOycgKyBzdWJNZW51TmFtZV0uaGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc3ViTWVudVZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgICAgICAgICAgIHN1Yk1lbnVWYWx1ZSgpO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgc2VsZi5hbmFseXNlcihzdWJNZW51VmFsdWUpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgICAgc3ViT2JqWycmbmJzcDsnICsgc3ViTWVudU5hbWVdLmFjdGlvbiA9ICdjbGljayc7XG5cdCAgICAgICAgICAgICAgc3ViT2JqWycmbmJzcDsnICsgc3ViTWVudU5hbWVdLnN0eWxlID0gc3ViQ2F0U3R5bGU7XG5cdCAgICAgICAgICAgICAgb2JqW2tleV0uaGFuZGxlci5wdXNoKHN1Yk9iaik7XG5cdCAgICAgICAgICAgICAgaWYgKGouaW5kZXhPZignQ3VzdG9tJykgPT09IC0xKSB7XG5cdCAgICAgICAgICAgICAgICBvYmpba2V5XS5oYW5kbGVyLnB1c2goe1xuXHQgICAgICAgICAgICAgICAgICAnJzoge1xuXHQgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG5cdCAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjZDVkMmQyJyxcblx0ICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogJzFweCcsXG5cdCAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46ICcxcHgnLFxuXHQgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogJzBweCdcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfTtcblx0XG5cdCAgICAgICAgICAgIGZvciAodmFyIGogaW4gZ2FPcHRpb25zT2JqW2ldKSB7XG5cdCAgICAgICAgICAgICAgdmFyIF9yZXQyID0gX2xvb3AyKGopO1xuXHRcblx0ICAgICAgICAgICAgICBpZiAoX3JldDIgPT09ICdjb250aW51ZScpIGNvbnRpbnVlO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBjb250ZXh0QXJyYXkucHVzaChvYmopO1xuXHQgICAgICAgICAgY29udGV4dEFycmF5LnB1c2goe1xuXHQgICAgICAgICAgICAnJzoge1xuXHQgICAgICAgICAgICAgIHN0eWxlOiB7XG5cdCAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjZDVkMmQyJyxcblx0ICAgICAgICAgICAgICAgIGhlaWdodDogJzFweCcsXG5cdCAgICAgICAgICAgICAgICBtYXJnaW46ICcxcHgnLFxuXHQgICAgICAgICAgICAgICAgcGFkZGluZzogJzBweCdcblx0ICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH0pO1xuXHQgICAgICAgIH07XG5cdFxuXHQgICAgICAgIGZvciAodmFyIGkgaW4gZ2FPcHRpb25zT2JqKSB7XG5cdCAgICAgICAgICBfbG9vcChpKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIGNvbnRleHRBcnJheS5wdXNoKHtcblx0ICAgICAgICAgICcmbmJzcDsgJm5ic3A7IFJlc2V0IFZpZXcnOiB7XG5cdCAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoKSB7XG5cdCAgICAgICAgICAgICAgc2VsZi5hbmFseXNlcigncmVzZXQnKTtcblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgYWN0aW9uOiAnY2xpY2snLFxuXHQgICAgICAgICAgICBzdHlsZTogc3ViQ2F0U3R5bGVcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblx0XG5cdCAgICAgICAgY29udGV4dE1lbnUuYXBwZW5kQXNMaXN0KGNvbnRleHRBcnJheSk7XG5cdFxuXHQgICAgICAgIHRoaXMuU3ltYm9sU3RvcmUucmVnaXN0ZXIoJ0NvbnRleHRJY29uJywgZnVuY3Rpb24gKHBvc3gsIHBvc3ksIHJhZCkge1xuXHQgICAgICAgICAgdmFyIHggPSBwb3N4LFxuXHQgICAgICAgICAgICAgIHkgPSBwb3N5LFxuXHQgICAgICAgICAgICAgIHIgPSByYWQgKiAyLFxuXHQgICAgICAgICAgICAgIHNwYWNlID0gTWF0aC5yb3VuZChyIC8gNCksXG5cdCAgICAgICAgICAgICAgaGFsZldpZHRoID0gTWF0aC5yb3VuZChyIC8gMikgKiAwLjcsXG5cdCAgICAgICAgICAgICAgc3RhcnRYID0geCAtIGhhbGZXaWR0aCxcblx0ICAgICAgICAgICAgICBlbmRYID0geCArIGhhbGZXaWR0aCxcblx0ICAgICAgICAgICAgICBzdGFydFkgPSB5ICsgc3BhY2UsXG5cdCAgICAgICAgICAgICAgZW5kWSA9IHkgLSBzcGFjZTtcblx0ICAgICAgICAgIHJldHVybiBbJ00nLCBzdGFydFgsIHksICdMJywgZW5kWCwgeSwgJ00nLCBzdGFydFgsIHN0YXJ0WSwgJ0wnLCBlbmRYLCBzdGFydFksICdNJywgc3RhcnRYLCBlbmRZLCAnTCcsIGVuZFgsIGVuZFldO1xuXHQgICAgICAgIH0pO1xuXHRcblx0ICAgICAgICBncm91cC5hZGRTeW1ib2woY29udGV4dE1lbnUpO1xuXHQgICAgICAgIHRvb2xiYXIuYWRkQ29tcG9uZW50KGdyb3VwKTtcblx0ICAgICAgICByZXR1cm4gdG9vbGJhcjtcblx0ICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICBrZXk6ICdnZXRMb2dpY2FsU3BhY2UnLFxuXHQgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TG9naWNhbFNwYWNlKGF2YWlsYWJsZVdpZHRoLCBhdmFpbGFibGVIZWlnaHQpIHtcblx0ICAgICAgICBhdmFpbGFibGVXaWR0aCAvPSAyO1xuXHQgICAgICAgIHZhciBsb2dpY2FsU3BhY2UsXG5cdCAgICAgICAgICAgIHdpZHRoID0gMCxcblx0ICAgICAgICAgICAgaGVpZ2h0ID0gMCxcblx0ICAgICAgICAgICAgaSxcblx0ICAgICAgICAgICAgbG47XG5cdFxuXHQgICAgICAgIGZvciAoaSA9IDAsIGxuID0gdGhpcy50b29sYmFycy5sZW5ndGg7IGkgPCBsbjsgaSsrKSB7XG5cdCAgICAgICAgICBsb2dpY2FsU3BhY2UgPSB0aGlzLnRvb2xiYXJzW2ldLmdldExvZ2ljYWxTcGFjZShhdmFpbGFibGVXaWR0aCwgYXZhaWxhYmxlSGVpZ2h0KTtcblx0ICAgICAgICAgIHdpZHRoID0gTWF0aC5tYXgobG9naWNhbFNwYWNlLndpZHRoLCB3aWR0aCk7XG5cdCAgICAgICAgICBoZWlnaHQgKz0gbG9naWNhbFNwYWNlLmhlaWdodDtcblx0ICAgICAgICAgIHRoaXMudG9vbGJhcnNbaV0ud2lkdGggPSBsb2dpY2FsU3BhY2Uud2lkdGg7XG5cdCAgICAgICAgICB0aGlzLnRvb2xiYXJzW2ldLmhlaWdodCA9IGxvZ2ljYWxTcGFjZS5oZWlnaHQ7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGhlaWdodCArPSB0aGlzLnBhZGRpbmc7XG5cdCAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgIHdpZHRoOiB3aWR0aCA+IGF2YWlsYWJsZVdpZHRoID8gMCA6IHdpZHRoLFxuXHQgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQgPiBhdmFpbGFibGVIZWlnaHQgPyAwIDogaGVpZ2h0XG5cdCAgICAgICAgfTtcblx0ICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICBrZXk6ICdwbGFjZUluQ2FudmFzJyxcblx0ICAgICAgdmFsdWU6IGZ1bmN0aW9uIHBsYWNlSW5DYW52YXMoKSB7XG5cdCAgICAgICAgdmFyIF9zZWxmID0gdGhpcztcblx0ICAgICAgICBfc2VsZi5wYWRkaW5nID0gNTtcblx0ICAgICAgICBfc2VsZi5zcGFjZU1hbmFnZXJJbnN0YW5jZS5hZGQoW3tcblx0ICAgICAgICAgIG5hbWU6IGZ1bmN0aW9uIG5hbWUoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiAnVG9vbEJveEV4dCc7XG5cdCAgICAgICAgICB9LFxuXHQgICAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYob2JqKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBvYmpbJzAnXTtcblx0ICAgICAgICAgIH0sXG5cdCAgICAgICAgICBzZWxmOiBmdW5jdGlvbiBzZWxmKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gX3NlbGY7XG5cdCAgICAgICAgICB9LFxuXHQgICAgICAgICAgcHJpb3JpdHk6IGZ1bmN0aW9uIHByaW9yaXR5KCkge1xuXHQgICAgICAgICAgICByZXR1cm4gMjtcblx0ICAgICAgICAgIH0sXG5cdCAgICAgICAgICBsYXlvdXQ6IGZ1bmN0aW9uIGxheW91dChvYmopIHtcblx0ICAgICAgICAgICAgcmV0dXJuIG9iai5pbmxpbmU7XG5cdCAgICAgICAgICB9LFxuXHQgICAgICAgICAgb3JpZW50YXRpb246IFt7XG5cdCAgICAgICAgICAgIHR5cGU6IGZ1bmN0aW9uIHR5cGUob2JqKSB7XG5cdCAgICAgICAgICAgICAgcmV0dXJuIG9iai5ob3Jpem9udGFsO1xuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBwb3NpdGlvbjogW3tcblx0ICAgICAgICAgICAgICB0eXBlOiBmdW5jdGlvbiB0eXBlKG9iaikge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIG9iai50b3A7XG5cdCAgICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgICBhbGlnbm1lbnQ6IFt7XG5cdCAgICAgICAgICAgICAgICB0eXBlOiBmdW5jdGlvbiB0eXBlKG9iaikge1xuXHQgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqLnJpZ2h0O1xuXHQgICAgICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgICAgIGRpbWVuc2lvbnM6IFtmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnQgPSB0aGlzLmdldFBhcmVudENvbXBvbmVudEdyb3VwKCk7XG5cdCAgICAgICAgICAgICAgICAgIHJldHVybiBfc2VsZi5nZXRMb2dpY2FsU3BhY2UocGFyZW50LmdldFdpZHRoKCksIHBhcmVudC5nZXRIZWlnaHQoKSk7XG5cdCAgICAgICAgICAgICAgICB9XVxuXHQgICAgICAgICAgICAgIH1dXG5cdCAgICAgICAgICAgIH1dXG5cdCAgICAgICAgICB9XVxuXHQgICAgICAgIH1dKTtcblx0ICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICBrZXk6ICdzZXREcmF3aW5nQ29uZmlndXJhdGlvbicsXG5cdCAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXREcmF3aW5nQ29uZmlndXJhdGlvbih4LCB5LCB3aWR0aCwgaGVpZ2h0LCBncm91cCkge1xuXHQgICAgICAgIHZhciBtZXMgPSB0aGlzLm1lYXN1cmVtZW50O1xuXHQgICAgICAgIG1lcy54ID0geDtcblx0ICAgICAgICBtZXMueSA9IHk7XG5cdCAgICAgICAgbWVzLndpZHRoID0gd2lkdGg7XG5cdCAgICAgICAgbWVzLmhlaWdodCA9IGhlaWdodDtcblx0XG5cdCAgICAgICAgdGhpcy5wYXJlbnRHcm91cCA9IGdyb3VwO1xuXHRcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICBrZXk6ICdkcmF3Jyxcblx0ICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXcoeCwgeSwgd2lkdGgsIGhlaWdodCwgZ3JvdXApIHtcblx0ICAgICAgICB2YXIgbWVhc3VyZW1lbnQgPSB0aGlzLm1lYXN1cmVtZW50LFxuXHQgICAgICAgICAgICB0b29sYmFycyA9IHRoaXMudG9vbGJhcnMsXG5cdCAgICAgICAgICAgIGxuLFxuXHQgICAgICAgICAgICBpLFxuXHQgICAgICAgICAgICB0b29sYmFyO1xuXHQgICAgICAgIHggPSB4ID09PSB1bmRlZmluZWQgPyBtZWFzdXJlbWVudC54IDogeDtcblx0ICAgICAgICB5ID0geSA9PT0gdW5kZWZpbmVkID8gbWVhc3VyZW1lbnQueSA6IHk7XG5cdCAgICAgICAgd2lkdGggPSB3aWR0aCA9PT0gdW5kZWZpbmVkID8gbWVhc3VyZW1lbnQud2lkdGggOiB3aWR0aDtcblx0ICAgICAgICBoZWlnaHQgPSBoZWlnaHQgPT09IHVuZGVmaW5lZCA/IG1lYXN1cmVtZW50LmhlaWdodCA6IGhlaWdodDtcblx0ICAgICAgICBncm91cCA9IGdyb3VwID09PSB1bmRlZmluZWQgPyB0aGlzLnBhcmVudEdyb3VwIDogZ3JvdXA7XG5cdCAgICAgICAgaWYgKHdpZHRoICYmIGhlaWdodCkge1xuXHQgICAgICAgICAgZm9yIChpID0gMCwgbG4gPSB0b29sYmFycy5sZW5ndGg7IGkgPCBsbjsgaSsrKSB7XG5cdCAgICAgICAgICAgIHRvb2xiYXIgPSB0b29sYmFyc1tpXTtcblx0ICAgICAgICAgICAgdG9vbGJhci5kcmF3KHgsIHkpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfV0pO1xuXHRcblx0ICAgIHJldHVybiBHcm93dGhBbmFseXNlckV4dDtcblx0ICB9KCk7XG5cdFxuXHQgIDtcblx0ICBGdXNpb25DaGFydHMucmVnaXN0ZXJDb21wb25lbnQoJ2V4dGVuc2lvbnMnLCAnZ3Jvd3RoLWFuYWx5c2VyLWV4dCcsIEdyb3d0aEFuYWx5c2VyRXh0KTtcblx0fV0pO1xuXG4vKioqLyB9LFxuLyogMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cdFxuXHR2YXIgR3Jvd3RoQW5hbHlzZXIgPSBmdW5jdGlvbiAoKSB7XG5cdCAgZnVuY3Rpb24gR3Jvd3RoQW5hbHlzZXIoZGF0YSkge1xuXHQgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEdyb3d0aEFuYWx5c2VyKTtcblx0XG5cdCAgICB0aGlzLmRhdGEgPSBkYXRhLm1hcChmdW5jdGlvbiAoYSkge1xuXHQgICAgICByZXR1cm4gYS5tYXAoZnVuY3Rpb24gKGIpIHtcblx0ICAgICAgICByZXR1cm4gYjtcblx0ICAgICAgfSk7XG5cdCAgICB9KTtcblx0ICAgIHRoaXMuRm9ybXVsYWUgPSBGb3JtdWxhZTtcblx0ICB9XG5cdFxuXHQgIF9jcmVhdGVDbGFzcyhHcm93dGhBbmFseXNlciwgW3tcblx0ICAgIGtleTogJ2FuYWx5c2UnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGFuYWx5c2UobW9kZSkge1xuXHQgICAgICB2YXIgaSA9IDAsXG5cdCAgICAgICAgICBpaSA9IDAsXG5cdCAgICAgICAgICBqID0gMCxcblx0ICAgICAgICAgIGpqID0gMCxcblx0ICAgICAgICAgIG51bSA9IDAsXG5cdCAgICAgICAgICBjaGVja0FyciA9IFtdLFxuXHQgICAgICAgICAgY2hlY2tOdW0gPSAwLFxuXHQgICAgICAgICAgZGF0YUFyID0gdGhpcy5kYXRhLFxuXHQgICAgICAgICAgbkRhdGFBciA9IFtdLFxuXHQgICAgICAgICAgdGVtcEFyID0gW10sXG5cdCAgICAgICAgICB0ZW1wID0gMDtcblx0ICAgICAgaWYgKHR5cGVvZiBtb2RlID09PSAnc3RyaW5nJyAmJiBtb2RlLnRvTG93ZXJDYXNlKCkgPT09ICdyZXNldCcpIHtcblx0ICAgICAgICByZXR1cm4gZGF0YUFyLm1hcChmdW5jdGlvbiAoYSkge1xuXHQgICAgICAgICAgcmV0dXJuIGEubWFwKGZ1bmN0aW9uIChiKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBiO1xuXHQgICAgICAgICAgfSk7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH0gZWxzZSBpZiAoIWlzTmFOKG1vZGUpKSB7XG5cdCAgICAgICAgLy8gSGFuZGxpbmcgYSBudW1iZXJcblx0ICAgICAgICBjaGVja051bSA9ICttb2RlO1xuXHQgICAgICAgIGZvciAoaSA9IDAsIGlpID0gZGF0YUFyLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcblx0ICAgICAgICAgIHRlbXBBciA9IFtdO1xuXHQgICAgICAgICAgZm9yIChqID0gMCwgamogPSBkYXRhQXJbaV0ubGVuZ3RoOyBqIDwgamo7ICsraikge1xuXHQgICAgICAgICAgICBudW0gPSBkYXRhQXJbaV1bal07XG5cdCAgICAgICAgICAgIHRlbXBBci5wdXNoKDEwMCAqIChudW0gLSBjaGVja051bSkgLyBjaGVja051bSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBuRGF0YUFyLnB1c2godGVtcEFyKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG1vZGUgPT09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgbW9kZSA9IHRoaXMuRm9ybXVsYWVbbW9kZV07XG5cdCAgICAgICAgZm9yIChpID0gMCwgaWkgPSBkYXRhQXIubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuXHQgICAgICAgICAgdGVtcEFyID0gW107XG5cdCAgICAgICAgICBjaGVja051bSA9IG1vZGUoZGF0YUFyW2ldKTtcblx0ICAgICAgICAgIGZvciAoaiA9IDAsIGpqID0gZGF0YUFyW2ldLmxlbmd0aDsgaiA8IGpqOyArK2opIHtcblx0ICAgICAgICAgICAgbnVtID0gZGF0YUFyW2ldW2pdO1xuXHQgICAgICAgICAgICBpZiAoY2hlY2tOdW0gPT09IDApIHtcblx0ICAgICAgICAgICAgICB0ZW1wID0gdW5kZWZpbmVkO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgIHRlbXAgPSAxMDAgKiAobnVtIC0gY2hlY2tOdW0pIC8gY2hlY2tOdW07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdGVtcEFyLnB1c2godGVtcCk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBuRGF0YUFyLnB1c2godGVtcEFyKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0gZWxzZSBpZiAoIWlzTmFOKG1vZGUucmVscG9zaXRpb24pKSB7XG5cdCAgICAgICAgbW9kZSA9IG1vZGUucmVscG9zaXRpb247XG5cdCAgICAgICAgZm9yIChpID0gMCwgaWkgPSBkYXRhQXIubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuXHQgICAgICAgICAgdGVtcEFyID0gW107XG5cdCAgICAgICAgICBmb3IgKGogPSAwLCBqaiA9IGRhdGFBcltpXS5sZW5ndGg7IGogPCBqajsgKytqKSB7XG5cdCAgICAgICAgICAgIG51bSA9IGRhdGFBcltpXVtqXTtcblx0ICAgICAgICAgICAgaWYgKGogKyBtb2RlID49IDAgJiYgaiArIG1vZGUgPCBqaikge1xuXHQgICAgICAgICAgICAgIGNoZWNrTnVtID0gZGF0YUFyW2ldW2ogKyBtb2RlXTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICBjaGVja051bSA9IG51bTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB0ZW1wQXIucHVzaCgxMDAgKiAobnVtIC0gY2hlY2tOdW0pIC8gY2hlY2tOdW0pO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgbkRhdGFBci5wdXNoKHRlbXBBcik7XG5cdCAgICAgICAgfVxuXHQgICAgICB9IGVsc2UgaWYgKCFpc05hTihtb2RlLnBvc2l0aW9uKSB8fCB0eXBlb2YgbW9kZS5wb3NpdGlvbiA9PT0gJ3N0cmluZycpIHtcblx0ICAgICAgICBtb2RlID0gbW9kZS5wb3NpdGlvbjtcblx0ICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IGRhdGFBci5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG5cdCAgICAgICAgICB0ZW1wQXIgPSBbXTtcblx0ICAgICAgICAgIGZvciAoaiA9IDAsIGpqID0gZGF0YUFyW2ldLmxlbmd0aDsgaiA8IGpqOyArK2opIHtcblx0ICAgICAgICAgICAgbnVtID0gZGF0YUFyW2ldW2pdO1xuXHQgICAgICAgICAgICBpZiAobW9kZSA9PT0gJ2xhc3QnKSB7XG5cdCAgICAgICAgICAgICAgY2hlY2tOdW0gPSBkYXRhQXJbaV1bamogLSAxXTtcblx0ICAgICAgICAgICAgfSBlbHNlIGlmIChtb2RlID09PSAnbWlkJykge1xuXHQgICAgICAgICAgICAgIGNoZWNrTnVtID0gZGF0YUFyW2ldW2pqIC8gMl07XG5cdCAgICAgICAgICAgIH0gZWxzZSBpZiAobW9kZSA+PSAwICYmIG1vZGUgPCBqaikge1xuXHQgICAgICAgICAgICAgIGNoZWNrTnVtID0gZGF0YUFyW2ldW21vZGVdO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgIGNoZWNrTnVtID0gbnVtO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHRlbXBBci5wdXNoKDEwMCAqIChudW0gLSBjaGVja051bSkgLyBjaGVja051bSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBuRGF0YUFyLnB1c2godGVtcEFyKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0gZWxzZSBpZiAoIWlzTmFOKG1vZGUucmVsZGF0YXNldHBvc2l0aW9uKSkge1xuXHQgICAgICAgIG1vZGUgPSBtb2RlLnJlbGRhdGFzZXRwb3NpdGlvbjtcblx0ICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IGRhdGFBci5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG5cdCAgICAgICAgICB0ZW1wQXIgPSBbXTtcblx0ICAgICAgICAgIGlmIChpICsgbW9kZSA+PSAwICYmIGkgKyBtb2RlIDwgaWkpIHtcblx0ICAgICAgICAgICAgY2hlY2tBcnIgPSBkYXRhQXJbaSArIG1vZGVdO1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgY2hlY2tBcnIgPSBkYXRhQXJbaV07XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBmb3IgKGogPSAwLCBqaiA9IGRhdGFBcltpXS5sZW5ndGg7IGogPCBqajsgKytqKSB7XG5cdCAgICAgICAgICAgIGNoZWNrTnVtID0gY2hlY2tBcnJbal07XG5cdCAgICAgICAgICAgIG51bSA9IGRhdGFBcltpXVtqXTtcblx0ICAgICAgICAgICAgdGVtcEFyLnB1c2goMTAwICogKG51bSAtIGNoZWNrTnVtKSAvIG51bSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBuRGF0YUFyLnB1c2godGVtcEFyKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgZm9yIChpID0gMCwgaWkgPSBuRGF0YUFyLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcblx0ICAgICAgICBmb3IgKGogPSAwLCBqaiA9IG5EYXRhQXJbaV0ubGVuZ3RoOyBqIDwgamo7ICsraikge1xuXHQgICAgICAgICAgaWYgKCFOdW1iZXIuaXNGaW5pdGUobkRhdGFBcltpXVtqXSkpIHtcblx0ICAgICAgICAgICAgbkRhdGFBcltpXVtqXSA9IG51bGw7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHZhciByb3VuZFRvVHdvID0gZnVuY3Rpb24gcm91bmRUb1R3byhudW0pIHtcblx0ICAgICAgICByZXR1cm4gKyhNYXRoLnJvdW5kKG51bSArICdlKzInKSArICdlLTInKTtcblx0ICAgICAgfTtcblx0ICAgICAgLy8gUm91bmRpbmcgdmFsdWVzXG5cdCAgICAgIGZvciAoaSA9IDAsIGlpID0gbkRhdGFBci5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG5cdCAgICAgICAgZm9yIChqID0gMCwgamogPSBuRGF0YUFyW2ldLmxlbmd0aDsgaiA8IGpqOyArK2opIHtcblx0ICAgICAgICAgIG5EYXRhQXJbaV1bal0gPSByb3VuZFRvVHdvKG5EYXRhQXJbaV1bal0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICBmb3IgKGkgPSBuRGF0YUFyLmxlbmd0aDsgaS0tOykge1xuXHQgICAgICAgIGZvciAoaiA9IG5EYXRhQXJbaV0ubGVuZ3RoOyBqLS07KSB7XG5cdCAgICAgICAgICB0ZW1wID0gcGFyc2VJbnQobkRhdGFBcltpXVtqXSAqIDEwMCk7XG5cdCAgICAgICAgICBuRGF0YUFyW2ldW2pdID0gdGVtcCAvIDEwMDtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIG5EYXRhQXI7XG5cdCAgICB9XG5cdCAgfV0pO1xuXHRcblx0ICByZXR1cm4gR3Jvd3RoQW5hbHlzZXI7XG5cdH0oKTtcblx0XG5cdHZhciBGb3JtdWxhZSA9IHtcblx0ICBNaW5pbXVtOiBmdW5jdGlvbiBNaW5pbXVtKGFycikge1xuXHQgICAgcmV0dXJuIGFyci5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcblx0ICAgICAgcmV0dXJuIGEgPiBiID8gYiA6IGE7XG5cdCAgICB9KTtcblx0ICB9LFxuXHQgIE1heGltdW06IGZ1bmN0aW9uIE1heGltdW0oYXJyKSB7XG5cdCAgICByZXR1cm4gYXJyLnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xuXHQgICAgICByZXR1cm4gYSA8IGIgPyBiIDogYTtcblx0ICAgIH0pO1xuXHQgIH0sXG5cdCAgTWVhbjogZnVuY3Rpb24gTWVhbihhcnIpIHtcblx0ICAgIHJldHVybiBhcnIucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG5cdCAgICAgIHJldHVybiBhICsgYjtcblx0ICAgIH0pIC8gYXJyLmxlbmd0aDtcblx0ICB9LFxuXHQgIE1lZGlhbjogZnVuY3Rpb24gTWVkaWFuKGFycikge1xuXHQgICAgcmV0dXJuIGFyci5tYXAoZnVuY3Rpb24gKGEpIHtcblx0ICAgICAgcmV0dXJuIGE7XG5cdCAgICB9KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG5cdCAgICAgIHJldHVybiBhIC0gYjtcblx0ICAgIH0pW2Fyci5sZW5ndGggLyAyXTtcblx0ICB9LFxuXHQgICdTdGFuZGFyZCBEZXZpYXRpb24nOiBmdW5jdGlvbiBTdGFuZGFyZERldmlhdGlvbih2YWx1ZXMpIHtcblx0ICAgIGZ1bmN0aW9uIGF2ZXJhZ2UoZGF0YSkge1xuXHQgICAgICB2YXIgc3VtLCBhdmc7XG5cdCAgICAgIHN1bSA9IGRhdGEucmVkdWNlKGZ1bmN0aW9uIChzdW0sIHZhbHVlKSB7XG5cdCAgICAgICAgcmV0dXJuIHN1bSArIHZhbHVlO1xuXHQgICAgICB9LCAwKTtcblx0XG5cdCAgICAgIGF2ZyA9IHN1bSAvIGRhdGEubGVuZ3RoO1xuXHQgICAgICByZXR1cm4gYXZnO1xuXHQgICAgfVxuXHQgICAgdmFyIGF2ZyA9IDAsXG5cdCAgICAgICAgc3F1YXJlRGlmZnMgPSAwLFxuXHQgICAgICAgIHNxckRpZmYgPSAwLFxuXHQgICAgICAgIGF2Z1NxdWFyZURpZmYgPSAwLFxuXHQgICAgICAgIHN0ZERldiA9IDAsXG5cdCAgICAgICAgZGlmZiA9IDA7XG5cdCAgICBhdmcgPSBhdmVyYWdlKHZhbHVlcyk7XG5cdCAgICBzcXVhcmVEaWZmcyA9IHZhbHVlcy5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XG5cdCAgICAgIGRpZmYgPSB2YWx1ZSAtIGF2Zztcblx0ICAgICAgc3FyRGlmZiA9IGRpZmYgKiBkaWZmO1xuXHQgICAgICByZXR1cm4gc3FyRGlmZjtcblx0ICAgIH0pO1xuXHQgICAgYXZnU3F1YXJlRGlmZiA9IGF2ZXJhZ2Uoc3F1YXJlRGlmZnMpO1xuXHQgICAgc3RkRGV2ID0gTWF0aC5zcXJ0KGF2Z1NxdWFyZURpZmYpO1xuXHQgICAgcmV0dXJuIHN0ZERldjtcblx0ICB9XG5cdH07XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IEdyb3d0aEFuYWx5c2VyO1xuXG4vKioqLyB9XG4vKioqKioqLyBdKTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gZ3Jvd3RoLWFuYWx5c2VyLWVzNS5taW4uanMiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcblxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0ZXhwb3J0czoge30sXG4gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuIFx0XHRcdGxvYWRlZDogZmFsc2VcbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL2Jvb3RzdHJhcCA2OWI2NGE0ZTBhOWRhZTA2NjI0MyIsImNvbnN0IEdyb3d0aEFuYWx5c2VyID0gcmVxdWlyZSgnLi9ncm93dGhhbmFseXNlcicpO1xuXG5GdXNpb25DaGFydHMucmVnaXN0ZXIoJ2V4dGVuc2lvbicsIFsncHJpdmF0ZScsICdncm93dGgtYW5hbHlzZXItZXh0JywgZnVuY3Rpb24gKCkge1xuICBjbGFzcyBHcm93dGhBbmFseXNlckV4dCB7XG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgdGhpcy50b29sYm94ID0gRnVzaW9uQ2hhcnRzLmdldENvbXBvbmVudCgnYXBpJywgJ3Rvb2xib3gnKTtcbiAgICAgIHRoaXMuSG9yaXpvbnRhbFRvb2xiYXIgPSB0aGlzLnRvb2xib3guSG9yaXpvbnRhbFRvb2xiYXI7XG4gICAgICB0aGlzLkNvbXBvbmVudEdyb3VwID0gdGhpcy50b29sYm94LkNvbXBvbmVudEdyb3VwO1xuICAgICAgdGhpcy5TeW1ib2xTdG9yZSA9IHRoaXMudG9vbGJveC5TeW1ib2xTdG9yZTtcbiAgICAgIHdpbmRvdy5hID0gdGhpcztcbiAgICB9XG5cbiAgICByZW5kZXJDaGFuZ2UgKCkge1xuICAgICAgdmFyIGNoYXJ0SW5zdGFuY2UgPSB0aGlzLnRzT2JqZWN0LmNoYXJ0SW5zdGFuY2UsXG4gICAgICAgIGNvbXBvbmVudFN0b3JlID0gY2hhcnRJbnN0YW5jZS5hcGlJbnN0YW5jZS5nZXRDb21wb25lbnRTdG9yZSgpLFxuICAgICAgICBpID0gMDtcbiAgICAgIGZvciAoaSA9IDA7IGNvbXBvbmVudFN0b3JlLmdldENhbnZhc0J5SW5kZXgoaSk7ICsraSkge1xuICAgICAgICBjb21wb25lbnRTdG9yZS5nZXRDYW52YXNCeUluZGV4KGkpLmdldENvbXBvc2l0aW9uKCkuUGxvdE1hbmFnZXIucGxvdCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBhbmFseXNlciAobW9kZSkge1xuICAgICAgdmFyIGdhID0gdGhpcy5nYSB8fCB7fSxcbiAgICAgICAgc3RvcmUgPSB0aGlzLnRzT2JqZWN0LmFwaUluc3RhbmNlLmdldENvbXBvbmVudFN0b3JlKCksXG4gICAgICAgIGNhbnZhcyA9IHN0b3JlLmdldENhbnZhc0J5SW5kZXgoMCksXG4gICAgICAgIGNvbXAgPSBjYW52YXMuZ2V0Q29tcG9zaXRpb24oKSxcbiAgICAgICAgZHMgPSBnYS5kcyB8fCBjb21wLmRhdGFzZXQsXG4gICAgICAgIGksXG4gICAgICAgIGlkTWFwID0gZ2EuaWRNYXAgfHwge30sXG4gICAgICAgIHN0b3JlQXIgPSBnYS5zdG9yZUFyIHx8IFtdLFxuICAgICAgICBuU3RvcmVBcnIgPSBbXSxcbiAgICAgICAgeUF4aXMgPSBjYW52YXMuY29tcG9zaXRpb24ueUF4aXM7XG4gICAgICAvLyBDaGFuZ2luZyB5IEF4aXMgZm9ybWF0dG9yXG4gICAgICBpZiAobW9kZSA9PT0gJ3Jlc2V0Jykge1xuICAgICAgICB5QXhpcy5nZXRTY2FsZU9iaigpLmdldEludGVydmFsT2JqKCkuZ2V0Q29uZmlnKCdpbnRlcnZhbHMnKS5tYWpvci5mb3JtYXR0ZXIgPSBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHlBeGlzLmdldFNjYWxlT2JqKCkuZ2V0SW50ZXJ2YWxPYmooKS5nZXRDb25maWcoJ2ludGVydmFscycpLm1ham9yLmZvcm1hdHRlciA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICByZXR1cm4gdmFsICsgJyUnO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgLy8gRGVjbGFyYXRpb24gZW5kc1xuICAgICAgdGhpcy5nYSA9IGdhO1xuICAgICAgaWYgKCFnYS5zdG9yZUFyKSB7XG4gICAgICAgIHN0b3JlID0ge307XG4gICAgICAgIGlmICghZ2EuaWRNYXApIHtcbiAgICAgICAgICBkcy5mb3JFYWNoU2VyaWVzKGZ1bmN0aW9uIChhLCBiLCBjLCBzZXJpZXMpIHtcbiAgICAgICAgICAgIHN0b3JlW3Nlcmllcy5nZXRJZCgpXSA9IHNlcmllcy5nZXRPcmlnaW5hbERhdGEoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBmb3IgKGkgaW4gc3RvcmUpIHtcbiAgICAgICAgICAgIHN0b3JlQXIucHVzaChzdG9yZVtpXSk7XG4gICAgICAgICAgICBpZE1hcFtpXSA9IHN0b3JlQXIubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIC8vID0gc3RvcmVbaV0ubWFwKGZ1bmN0aW9uIChlKSB7IHJldHVybiAyMCAqIGUgKyAoTWF0aC5yYW5kb20oKSAqIDEwMDApOyB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZ2EuaWRNYXAgPSBpZE1hcDtcbiAgICAgICAgICBnYS5kcyA9IGRzO1xuICAgICAgICAgIGdhLnN0b3JlQXIgPSBzdG9yZUFyO1xuICAgICAgICAgIGdhLmdBbmFseXNlciA9IG5ldyBHcm93dGhBbmFseXNlcihzdG9yZUFyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgblN0b3JlQXJyID0gZ2EuZ0FuYWx5c2VyLmFuYWx5c2UobW9kZSk7XG4gICAgICBkcy5zZXREYXRhQnlTZXJpZXMoZnVuY3Rpb24gKHNlcmllcykge1xuICAgICAgICBpZiAoblN0b3JlQXJyLmxlbmd0aCkge1xuICAgICAgICAgIHNlcmllcy5zZXRPcmlnaW5hbERhdGEoblN0b3JlQXJyW2lkTWFwW3Nlcmllcy5nZXRJZCgpXV0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGNvbXAuaW1wbC51cGRhdGUoKTtcbiAgICB9O1xuXG4gICAgaW5pdCAocmVxdWlyZSkge1xuICAgICAgdmFyIGluc3RhbmNlID0gdGhpcztcbiAgICAgIHJlcXVpcmUoW1xuICAgICAgICAneEF4aXMnLFxuICAgICAgICAneUF4aXMnLFxuICAgICAgICAnZ3JhcGhpY3MnLFxuICAgICAgICAnY2hhcnQnLFxuICAgICAgICAnZGF0YXNldCcsXG4gICAgICAgICdQbG90TWFuYWdlcicsXG4gICAgICAgICdjYW52YXNDb25maWcnLFxuICAgICAgICAnTWFya2VyTWFuYWdlcicsXG4gICAgICAgICdyZWFjdGl2ZU1vZGVsJyxcbiAgICAgICAgJ2dsb2JhbFJlYWN0aXZlTW9kZWwnLFxuICAgICAgICAnc3BhY2VNYW5hZ2VySW5zdGFuY2UnLFxuICAgICAgICAnc21hcnRMYWJlbCcsXG4gICAgICAgICdjaGFydEluc3RhbmNlJyxcbiAgICAgICAgJ2V4dERhdGEnLFxuICAgICAgICAnY2FudmFzRGF0YScsXG4gICAgICAgIGZ1bmN0aW9uIChcbiAgICAgICAgICAgICAgeEF4aXMsXG4gICAgICAgICAgICAgIHlBeGlzLFxuICAgICAgICAgICAgICBncmFwaGljcyxcbiAgICAgICAgICAgICAgY2hhcnQsXG4gICAgICAgICAgICAgIGRhdGFzZXQsXG4gICAgICAgICAgICAgIHBsb3RNYW5hZ2VyLFxuICAgICAgICAgICAgICBjYW52YXNDb25maWcsXG4gICAgICAgICAgICAgIG1hcmtlck1hbmFnZXIsXG4gICAgICAgICAgICAgIHJlYWN0aXZlTW9kZWwsXG4gICAgICAgICAgICAgIGdsb2JhbFJlYWN0aXZlTW9kZWwsXG4gICAgICAgICAgICAgIHNwYWNlTWFuYWdlckluc3RhbmNlLFxuICAgICAgICAgICAgICBzbWFydExhYmVsLFxuICAgICAgICAgICAgICBjaGFydEluc3RhbmNlLFxuICAgICAgICAgICAgICBleHREYXRhLFxuICAgICAgICAgICAgICBjYW52YXNEYXRhKSB7XG4gICAgICAgICAgaW5zdGFuY2UueEF4aXMgPSB4QXhpcztcbiAgICAgICAgICBpbnN0YW5jZS55QXhpcyA9IHlBeGlzO1xuICAgICAgICAgIGluc3RhbmNlLmdyYXBoaWNzID0gZ3JhcGhpY3M7XG4gICAgICAgICAgaW5zdGFuY2UuY2hhcnQgPSBjaGFydDtcbiAgICAgICAgICBpbnN0YW5jZS5kYXRhc2V0ID0gZGF0YXNldDtcbiAgICAgICAgICBpbnN0YW5jZS5wbG90TWFuYWdlciA9IHBsb3RNYW5hZ2VyO1xuICAgICAgICAgIGluc3RhbmNlLm1hcmtlck1hbmFnZXIgPSBtYXJrZXJNYW5hZ2VyO1xuICAgICAgICAgIGluc3RhbmNlLmNhbnZhc0NvbmZpZyA9IGNhbnZhc0NvbmZpZztcbiAgICAgICAgICBpbnN0YW5jZS5yZWFjdGl2ZU1vZGVsID0gcmVhY3RpdmVNb2RlbDtcbiAgICAgICAgICBpbnN0YW5jZS5nbG9iYWxSZWFjdGl2ZU1vZGVsID0gZ2xvYmFsUmVhY3RpdmVNb2RlbDtcbiAgICAgICAgICBpbnN0YW5jZS5zcGFjZU1hbmFnZXJJbnN0YW5jZSA9IHNwYWNlTWFuYWdlckluc3RhbmNlO1xuICAgICAgICAgIGluc3RhbmNlLnNtYXJ0TGFiZWwgPSBzbWFydExhYmVsO1xuICAgICAgICAgIGluc3RhbmNlLmNoYXJ0SW5zdGFuY2UgPSBjaGFydEluc3RhbmNlO1xuICAgICAgICAgIGluc3RhbmNlLmNhbnZhc0RhdGEgPSBjYW52YXNEYXRhO1xuICAgICAgICAgIGluc3RhbmNlLmV4dERhdGEgPSBleHREYXRhO1xuICAgICAgICB9XG4gICAgICBdKTtcbiAgICAgIC8vICBjb25zb2xlLmxvZyhpbnN0YW5jZS5leHREYXRhKTtcbiAgICAgIHRoaXMuc3BhY2VNYW5hZ2VySW5zdGFuY2UgPSBpbnN0YW5jZS5zcGFjZU1hbmFnZXJJbnN0YW5jZTtcbiAgICAgIHRoaXMuZ2xvYmFsUmVhY3RpdmVNb2RlbCA9IGluc3RhbmNlLmdsb2JhbFJlYWN0aXZlTW9kZWw7XG4gICAgICB0aGlzLnRzT2JqZWN0ID0gaW5zdGFuY2UuY2hhcnRJbnN0YW5jZTtcbiAgICAgIHRoaXMuc3RhcnREdCA9IGluc3RhbmNlLmdsb2JhbFJlYWN0aXZlTW9kZWwubW9kZWxbJ3gtYXhpcy12aXNpYmxlLXJhbmdlLXN0YXJ0J107XG4gICAgICB0aGlzLmVuZER0ID0gaW5zdGFuY2UuZ2xvYmFsUmVhY3RpdmVNb2RlbC5tb2RlbFsneC1heGlzLXZpc2libGUtcmFuZ2UtZW5kJ107XG4gICAgICB0aGlzLnN0YXJ0RGF0YXNldCA9IGluc3RhbmNlLmdsb2JhbFJlYWN0aXZlTW9kZWwubW9kZWxbJ3gtYXhpcy1hYnNvbHV0ZS1yYW5nZS1zdGFydCddO1xuICAgICAgdGhpcy5lbmREYXRhc2V0ID0gaW5zdGFuY2UuZ2xvYmFsUmVhY3RpdmVNb2RlbC5tb2RlbFsneC1heGlzLWFic29sdXRlLXJhbmdlLWVuZCddO1xuICAgICAgdGhpcy50b29sYmFycyA9IFtdO1xuICAgICAgdGhpcy5tZWFzdXJlbWVudCA9IHt9O1xuICAgICAgdGhpcy50b29sYmFycy5wdXNoKHRoaXMuY3JlYXRlVG9vbGJhcigpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBjcmVhdGVUb29sYmFyICgpIHtcbiAgICAgIHZhciB0b29sYmFyLFxuICAgICAgICBncm91cCxcbiAgICAgICAgc2VsZiA9IHRoaXMsXG4gICAgICAgIGNvbnRleHRNZW51LFxuICAgICAgICBjb250ZXh0QXJyYXkgPSBbXSxcbiAgICAgICAgZ2FPcHRpb25zT2JqID0ge30sXG4gICAgICAgIHBvcHVwLFxuICAgICAgICBwYXBlciA9IHRoaXMuZ3JhcGhpY3MucGFwZXIsXG4gICAgICAgIGNoYXJ0Q29udGFpbmVyID0gdGhpcy5ncmFwaGljcy5jb250YWluZXIsXG4gICAgICAgIHN1YkNhdFN0eWxlID0ge1xuICAgICAgICAgICdmb250LXNpemUnOiAnMTJweCcsXG4gICAgICAgICAgJ2NvbG9yJzogJyM0YjRiNGInLFxuICAgICAgICAgICdmb250LWZhbWlseSc6ICdcIkx1Y2lkYSBHcmFuZGVcIiwgU2Fucy1zZXJpZidcbiAgICAgICAgfSxcbiAgICAgICAgY2F0U3R5bGUgPSB7XG4gICAgICAgICAgJ2ZvbnQtc2l6ZSc6ICcxM3B4JyxcbiAgICAgICAgICAnY29sb3InOiAnIzRiNGI0YicsXG4gICAgICAgICAgJ2ZvbnQtZmFtaWx5JzogJ1wiTHVjaWRhIEdyYW5kZVwiLCBTYW5zLXNlcmlmJyxcbiAgICAgICAgICAnZm9udFdlaWdodCc6ICdib2xkJ1xuICAgICAgICB9O1xuXG4gICAgICB0b29sYmFyID0gbmV3IHRoaXMuSG9yaXpvbnRhbFRvb2xiYXIoe1xuICAgICAgICBwYXBlcjogdGhpcy5ncmFwaGljcy5wYXBlcixcbiAgICAgICAgY2hhcnQ6IHRoaXMuY2hhcnQsXG4gICAgICAgIHNtYXJ0TGFiZWw6IHRoaXMuc21hcnRMYWJlbCxcbiAgICAgICAgY2hhcnRDb250YWluZXI6IHRoaXMuZ3JhcGhpY3MuY29udGFpbmVyXG4gICAgICB9KTtcblxuICAgICAgdG9vbGJhci5zZXRDb25maWcoe1xuICAgICAgICBmaWxsOiAnI2ZmZicsXG4gICAgICAgIGJvcmRlclRoaWNrbmVzczogMFxuICAgICAgfSk7XG5cbiAgICAgIGdyb3VwID0gbmV3IHRoaXMudG9vbGJveC5Db21wb25lbnRHcm91cCh7XG4gICAgICAgIHBhcGVyOiB0aGlzLmdyYXBoaWNzLnBhcGVyLFxuICAgICAgICBjaGFydDogdGhpcy5jaGFydCxcbiAgICAgICAgc21hcnRMYWJlbDogdGhpcy5zbWFydExhYmVsLFxuICAgICAgICBjaGFydENvbnRhaW5lcjogdGhpcy5ncmFwaGljcy5jb250YWluZXJcbiAgICAgIH0pO1xuXG4gICAgICBncm91cC5zZXRDb25maWcoe1xuICAgICAgICBmaWxsOiAnI2ZmZicsXG4gICAgICAgIGJvcmRlclRoaWNrbmVzczogMFxuICAgICAgfSk7XG5cbiAgICAgIGdhT3B0aW9uc09iaiA9IHtcbiAgICAgICAgJ0ZpcnN0IEluZGV4Jzoge3Bvc2l0aW9uOiAwfSxcbiAgICAgICAgJ1ByZXZpb3VzIEluZGV4Jzoge3JlbHBvc2l0aW9uOiAtMX0sXG4gICAgICAgICdTcGVjaWZpYyBWYWx1ZSc6IHtcbiAgICAgICAgICAnc3VibWVudSc6IHRydWUsXG4gICAgICAgICAgJ01pbmltdW0nOiAnTWluaW11bScsXG4gICAgICAgICAgJ01heGltdW0nOiAnTWF4aW11bScsXG4gICAgICAgICAgJ01lYW4nOiAnTWVhbicsXG4gICAgICAgICAgJ01lZGlhbic6ICdNZWRpYW4nLFxuICAgICAgICAgICdTdGFuZGFyZCBEZXZpYXRpb24nOiAnU3RhbmRhcmQgRGV2aWF0aW9uJyxcbiAgICAgICAgICAnQ3VzdG9tIFZhbHVlLi4uJzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcG9wdXAoKHZhbCkgPT4gc2VsZi5hbmFseXNlcih2YWwpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGNvbnRleHRNZW51ID0gbmV3IHRoaXMudG9vbGJveC5TeW1ib2xXaXRoQ29udGV4dCgnQ29udGV4dEljb24nLCB7XG4gICAgICAgIHBhcGVyOiB0aGlzLmdyYXBoaWNzLnBhcGVyLFxuICAgICAgICBjaGFydDogdGhpcy5jaGFydCxcbiAgICAgICAgc21hcnRMYWJlbDogdGhpcy5zbWFydExhYmVsLFxuICAgICAgICBjaGFydENvbnRhaW5lcjogdGhpcy5ncmFwaGljcy5jb250YWluZXJcbiAgICAgIH0sIHtcbiAgICAgICAgd2lkdGg6IDI0LFxuICAgICAgICBoZWlnaHQ6IDI0LFxuICAgICAgICBwb3NpdGlvbjogJ3JpZ2h0JyxcbiAgICAgICAgc3Ryb2tlOiAnI2NlZDVkNCcsXG4gICAgICAgIHN0cm9rZVdpZHRoOiAnMScsXG4gICAgICAgIHJhZGl1czogJzEnLFxuICAgICAgICBzeW1ib2xTdHJva2U6ICcjNjk2OTY5JyxcbiAgICAgICAgc3ltYm9sU3Ryb2tlV2lkdGg6ICcyJ1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnRleHRBcnJheS5wdXNoKHtcbiAgICAgICAgJ0dyb3d0aCBBbmFseXNlcic6IHtcbiAgICAgICAgICBzdHlsZTogY2F0U3R5bGVcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBwb3B1cCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB2YXIgYm94LFxuICAgICAgICAgIGhlYWRlcixcbiAgICAgICAgICBzdHlsZSA9IHtcbiAgICAgICAgICAgIGZvbnRTaXplOiAxMCArICdweCcsXG4gICAgICAgICAgICBsaW5lSGVpZ2h0OiAxNSArICdweCcsXG4gICAgICAgICAgICAnZm9udC1mYW1pbHknOiAnXCJMdWNpZGEgR3JhbmRlXCIsIFNhbnMtc2VyaWYnLFxuICAgICAgICAgICAgc3Ryb2tlOiAnIzY3Njc2NycsXG4gICAgICAgICAgICAnc3Ryb2tlLXdpZHRoJzogJzInXG4gICAgICAgICAgfSxcbiAgICAgICAgICBoZWFkZXJXaWR0aCA9IDE4MCxcbiAgICAgICAgICBoZWFkZXJUZXh0LFxuICAgICAgICAgIGNyb3NzLFxuICAgICAgICAgIGlucHV0RmllbGQsXG4gICAgICAgICAgYXBwbHlCdXR0b24sXG4gICAgICAgICAgeCA9IChzZWxmLmNoYXJ0LndpZHRoICogMC40NykgLSA5MCxcbiAgICAgICAgICB5ID0gc2VsZi5jaGFydC5oZWlnaHQgLyAyIC0gNDA7XG5cbiAgICAgICAgYm94ID0gcGFwZXIuaHRtbCgnZGl2Jywge1xuICAgICAgICAgIGZpbGw6ICcjZjdmN2Y3JyxcbiAgICAgICAgICB4OiB4LFxuICAgICAgICAgIHk6IHksXG4gICAgICAgICAgd2lkdGg6IDE4MCxcbiAgICAgICAgICBoZWlnaHQ6IDgwXG4gICAgICAgIH0sIHN0eWxlLCBjaGFydENvbnRhaW5lcik7XG5cbiAgICAgICAgaGVhZGVyID0gcGFwZXIuaHRtbCgnZGl2Jywge1xuICAgICAgICAgIGZpbGw6ICcjZThlOGU4JyxcbiAgICAgICAgICB3aWR0aDogaGVhZGVyV2lkdGgsXG4gICAgICAgICAgaGVpZ2h0OiAyMFxuICAgICAgICB9LCBzdHlsZSwgYm94KTtcblxuICAgICAgICBoZWFkZXJUZXh0ID0gcGFwZXIuaHRtbCgnZGl2Jywge1xuICAgICAgICAgIGZpbGw6ICd0cmFuc3BhcmVudCcsXG4gICAgICAgICAgd2lkdGg6IGhlYWRlcldpZHRoICogMC42LFxuICAgICAgICAgIGhlaWdodDogMjAsXG4gICAgICAgICAgeDogMTAsXG4gICAgICAgICAgeTogMlxuICAgICAgICB9LCBzdHlsZSwgaGVhZGVyKTtcblxuICAgICAgICBoZWFkZXJUZXh0LmF0dHIoe1xuICAgICAgICAgIHRleHQ6ICdQcm92aWRlIHZhbHVlJ1xuICAgICAgICB9KTtcblxuICAgICAgICBjcm9zcyA9IHBhcGVyLmh0bWwoJ2RpdicsIHtcbiAgICAgICAgICBmaWxsOiAndHJhbnNwYXJlbnQnLFxuICAgICAgICAgIHdpZHRoOiAxMCxcbiAgICAgICAgICBoZWlnaHQ6IDEwLFxuICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgIGZsb2F0OiAncmlnaHQnLFxuICAgICAgICAgIHRleHQ6ICdYJyxcbiAgICAgICAgICBjdXJzb3I6ICdwb2ludGVyJ1xuICAgICAgICB9LCBzdHlsZSwgaGVhZGVyKTtcblxuICAgICAgICBjcm9zcy5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgYm94LmhpZGUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaW5wdXRGaWVsZCA9IHBhcGVyLmh0bWwoJ2lucHV0Jywge1xuICAgICAgICAgIHdpZHRoOiAxMDAsXG4gICAgICAgICAgaGVpZ2h0OiAyMCxcbiAgICAgICAgICB4OiAxMCxcbiAgICAgICAgICB5OiAzMFxuICAgICAgICB9LCBzdHlsZSwgYm94KTtcblxuICAgICAgICBhcHBseUJ1dHRvbiA9IHBhcGVyLmh0bWwoJ2RpdicsIHtcbiAgICAgICAgICB3aWR0aDogNTAsXG4gICAgICAgICAgaGVpZ2h0OiAyMCxcbiAgICAgICAgICB4OiAxMjAsXG4gICAgICAgICAgeTogMzAsXG4gICAgICAgICAgZmlsbDogJyM1NTU1NTUnXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBmb250U2l6ZTogMTAgKyAncHgnLFxuICAgICAgICAgIGxpbmVIZWlnaHQ6IDE1ICsgJ3B4JyxcbiAgICAgICAgICAnZm9udC1mYW1pbHknOiAnXCJMdWNpZGEgR3JhbmRlXCIsIFNhbnMtc2VyaWYnLFxuICAgICAgICAgIGZpbGw6ICcjZWFlYWVhJyxcbiAgICAgICAgICBjb2xvcjogJyNlYWVhZWEnLFxuICAgICAgICAgIHN0cm9rZTogJyNlYWVhZWEnLFxuICAgICAgICAgIGN1cnNvcjogJ3BvaW50ZXInXG4gICAgICAgIH0sIGJveCk7XG5cbiAgICAgICAgZnVuY3Rpb24gYXBwbHlWYWx1ZSAoKSB7XG4gICAgICAgICAgYm94LmhpZGUoKTtcbiAgICAgICAgICBjYWxsYmFjayhpbnB1dEZpZWxkLnZhbCgpKTtcbiAgICAgICAgfVxuICAgICAgICBhcHBseUJ1dHRvbi5vbignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgYXBwbHlWYWx1ZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgaW5wdXRGaWVsZC5vbigna2V5dXAnLCAoZSkgPT4ge1xuICAgICAgICAgIGlmIChlLmtleUNvZGUgPT09IDEzKSB7XG4gICAgICAgICAgICBhcHBseVZhbHVlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgYXBwbHlCdXR0b24uYXR0cih7XG4gICAgICAgICAgdGV4dDogJ0FwcGx5J1xuICAgICAgICB9KTtcbiAgICAgICAgaW5wdXRGaWVsZC5lbGVtZW50LmZvY3VzKCk7XG4gICAgICAgIGZ1bmN0aW9uIGlucHV0RmllbGROdW1iZXJIYW5kbGVyICgpIHtcbiAgICAgICAgICBpbnB1dEZpZWxkLmVsZW1lbnQudmFsdWUgPSBpbnB1dEZpZWxkLmVsZW1lbnQudmFsdWUucmVwbGFjZSgvW15cXGQuLV0vZywgJycpO1xuICAgICAgICB9XG4gICAgICAgIGlucHV0RmllbGQuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGlucHV0RmllbGROdW1iZXJIYW5kbGVyKTtcbiAgICAgICAgY3Jvc3MuZWxlbWVudC5zdHlsZVsncG9zaXRpb24nXSA9ICdyZWxhdGl2ZSc7XG4gICAgICAgIGNyb3NzLmVsZW1lbnQuc3R5bGVbJ2JhY2tncm91bmRDb2xvciddID0gJyNkMmQyZDInO1xuICAgICAgICBjcm9zcy5lbGVtZW50LnN0eWxlWydib3JkZXInXSA9ICcycHggc29saWQgI2NiY2JjYic7XG4gICAgICAgIGNyb3NzLmVsZW1lbnQuc3R5bGVbJ3BhZGRpbmcnXSA9ICcwcHggMHB4IDMuNXB4IDJweCc7XG4gICAgICAgIGNyb3NzLmVsZW1lbnQuc3R5bGVbJ2NvbG9yJ10gPSAnIzhjOGM4Yyc7XG4gICAgICAgIGNyb3NzLmVsZW1lbnQuc3R5bGVbJ21hcmdpbiddID0gJzFweCAycHgnO1xuICAgICAgICBjcm9zcy5lbGVtZW50LnN0eWxlWydmbG9hdCddID0gJ3JpZ2h0JztcbiAgICAgICAgaW5wdXRGaWVsZC5lbGVtZW50LnN0eWxlWydtYXJnaW5Ub3AnXSA9ICc4cHgnO1xuICAgICAgICBpbnB1dEZpZWxkLmVsZW1lbnQuc3R5bGVbJ2JvcmRlciddID0gJzJweCBzb2xpZCAjZGFkYmRhJztcbiAgICAgICAgYXBwbHlCdXR0b24uZWxlbWVudC5zdHlsZVsnbWFyZ2luVG9wJ10gPSAnOHB4JztcbiAgICAgICAgYm94LmVsZW1lbnQuc3R5bGVbJ2JvcmRlciddID0gJzFweCBzb2xpZCAjZDRkMmQzJztcbiAgICAgICAgaGVhZGVyLmVsZW1lbnQuc3R5bGVbJ2JvcmRlciddID0gJzFweCBzb2xpZCAjZDRkMmQzJztcbiAgICAgICAgaGVhZGVyLmVsZW1lbnQuc3R5bGVbJ3dpZHRoJ10gPSAnMTc5cHgnO1xuICAgICAgICBoZWFkZXJUZXh0LmVsZW1lbnQuc3R5bGVbJ2ZvbnRTaXplJ10gPSAnMTEuNXB4JztcbiAgICAgICAgaGVhZGVyVGV4dC5lbGVtZW50LnN0eWxlWydtYXJnaW5Ub3AnXSA9ICcwLjVweCc7XG4gICAgICAgIGhlYWRlclRleHQuZWxlbWVudC5zdHlsZVsnY29sb3InXSA9ICcjNjc2NzY3JztcbiAgICAgICAgaGVhZGVyLmVsZW1lbnQuc3R5bGVbJ2ZvbnQtZmFtaWx5J10gPSAnXCJMdWNpZGEgR3JhbmRlXCIsIFNhbnMtc2VyaWYnO1xuICAgICAgICBhcHBseUJ1dHRvbi5lbGVtZW50LnN0eWxlWyd0ZXh0QWxpZ24nXSA9ICdjZW50ZXInO1xuICAgICAgICBhcHBseUJ1dHRvbi5lbGVtZW50LnN0eWxlWydmb250U2l6ZSddID0gJzExcHgnO1xuICAgICAgICBhcHBseUJ1dHRvbi5lbGVtZW50LnN0eWxlWydwYWRkaW5nVG9wJ10gPSAnM3B4JztcbiAgICAgICAgYXBwbHlCdXR0b24uZWxlbWVudC5zdHlsZVsnYm9yZGVyUmFkaXVzJ10gPSAnM3B4JztcbiAgICAgICAgYXBwbHlCdXR0b24uZWxlbWVudC5zdHlsZVsnY29sb3InXSA9ICcjZTRlNGU0JztcbiAgICAgIH07XG5cbiAgICAgIGZvciAobGV0IGkgaW4gZ2FPcHRpb25zT2JqKSB7XG4gICAgICAgIGxldCBrZXksXG4gICAgICAgICAgb2JqID0ge30sXG4gICAgICAgICAgc3ViT2JqID0ge307XG4gICAgICAgIGlmICghZ2FPcHRpb25zT2JqW2ldLnN1Ym1lbnUpIHtcbiAgICAgICAgICBrZXkgPSAnJm5ic3A7ICZuYnNwOyAnICsgaTtcbiAgICAgICAgICBvYmpba2V5XSA9IHt9O1xuICAgICAgICAgIG9ialtrZXldID0ge1xuICAgICAgICAgICAgc3R5bGU6IHN1YkNhdFN0eWxlLFxuICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBzZWxmLmFuYWx5c2VyKGdhT3B0aW9uc09ialtpXSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYWN0aW9uOiAnY2xpY2snXG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBrZXkgPSAnJiM5NjY2Jm5ic3A7ICcgKyBpO1xuICAgICAgICAgIG9ialtrZXldID0ge307XG4gICAgICAgICAgb2JqW2tleV0uYWN0aW9uID0gJ2NsaWNrJztcbiAgICAgICAgICBvYmpba2V5XS5zdHlsZSA9IHN1YkNhdFN0eWxlO1xuICAgICAgICAgIG9ialtrZXldLmhhbmRsZXIgPSBbXTtcbiAgICAgICAgICBmb3IgKGxldCBqIGluIGdhT3B0aW9uc09ialtpXSkge1xuICAgICAgICAgICAgbGV0IHN1Yk1lbnVOYW1lID0gaixcbiAgICAgICAgICAgICAgc3ViTWVudVZhbHVlID0gZ2FPcHRpb25zT2JqW2ldW2pdO1xuICAgICAgICAgICAgaWYgKGogPT09ICdzdWJtZW51Jykge1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN1Yk9iaiA9IHt9O1xuICAgICAgICAgICAgc3ViT2JqWycmbmJzcDsnICsgc3ViTWVudU5hbWVdID0ge307XG4gICAgICAgICAgICBzdWJPYmpbJyZuYnNwOycgKyBzdWJNZW51TmFtZV0uaGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzdWJNZW51VmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBzdWJNZW51VmFsdWUoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZWxmLmFuYWx5c2VyKHN1Yk1lbnVWYWx1ZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzdWJPYmpbJyZuYnNwOycgKyBzdWJNZW51TmFtZV0uYWN0aW9uID0gJ2NsaWNrJztcbiAgICAgICAgICAgIHN1Yk9ialsnJm5ic3A7JyArIHN1Yk1lbnVOYW1lXS5zdHlsZSA9IHN1YkNhdFN0eWxlO1xuICAgICAgICAgICAgb2JqW2tleV0uaGFuZGxlci5wdXNoKHN1Yk9iaik7XG4gICAgICAgICAgICBpZiAoai5pbmRleE9mKCdDdXN0b20nKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgb2JqW2tleV0uaGFuZGxlci5wdXNoKHtcbiAgICAgICAgICAgICAgICAnJzoge1xuICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnI2Q1ZDJkMicsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogJzFweCcsXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbjogJzFweCcsXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6ICcwcHgnXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29udGV4dEFycmF5LnB1c2gob2JqKTtcbiAgICAgICAgY29udGV4dEFycmF5LnB1c2goe1xuICAgICAgICAgICcnOiB7XG4gICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjZDVkMmQyJyxcbiAgICAgICAgICAgICAgaGVpZ2h0OiAnMXB4JyxcbiAgICAgICAgICAgICAgbWFyZ2luOiAnMXB4JyxcbiAgICAgICAgICAgICAgcGFkZGluZzogJzBweCdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0QXJyYXkucHVzaCh7XG4gICAgICAgICcmbmJzcDsgJm5ic3A7IFJlc2V0IFZpZXcnOiB7XG4gICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2VsZi5hbmFseXNlcigncmVzZXQnKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGFjdGlvbjogJ2NsaWNrJyxcbiAgICAgICAgICBzdHlsZTogc3ViQ2F0U3R5bGVcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGNvbnRleHRNZW51LmFwcGVuZEFzTGlzdChjb250ZXh0QXJyYXkpO1xuXG4gICAgICB0aGlzLlN5bWJvbFN0b3JlLnJlZ2lzdGVyKCdDb250ZXh0SWNvbicsIGZ1bmN0aW9uIChwb3N4LCBwb3N5LCByYWQpIHtcbiAgICAgICAgdmFyIHggPSBwb3N4LFxuICAgICAgICAgIHkgPSBwb3N5LFxuICAgICAgICAgIHIgPSByYWQgKiAyLFxuICAgICAgICAgIHNwYWNlID0gTWF0aC5yb3VuZChyIC8gNCksXG4gICAgICAgICAgaGFsZldpZHRoID0gTWF0aC5yb3VuZChyIC8gMikgKiAwLjcsXG4gICAgICAgICAgc3RhcnRYID0gKHggLSBoYWxmV2lkdGgpLFxuICAgICAgICAgIGVuZFggPSAoeCArIGhhbGZXaWR0aCksXG4gICAgICAgICAgc3RhcnRZID0gKHkgKyBzcGFjZSksXG4gICAgICAgICAgZW5kWSA9ICh5IC0gc3BhY2UpO1xuICAgICAgICByZXR1cm4gWydNJywgc3RhcnRYLCB5LCAnTCcsIGVuZFgsIHksICdNJywgc3RhcnRYLCBzdGFydFksICdMJywgZW5kWCwgc3RhcnRZLCAnTScsIHN0YXJ0WCwgZW5kWSwgJ0wnLCBlbmRYLCBlbmRZXTtcbiAgICAgIH0pO1xuXG4gICAgICBncm91cC5hZGRTeW1ib2woY29udGV4dE1lbnUpO1xuICAgICAgdG9vbGJhci5hZGRDb21wb25lbnQoZ3JvdXApO1xuICAgICAgcmV0dXJuIHRvb2xiYXI7XG4gICAgfTtcblxuICAgIGdldExvZ2ljYWxTcGFjZSAoYXZhaWxhYmxlV2lkdGgsIGF2YWlsYWJsZUhlaWdodCkge1xuICAgICAgYXZhaWxhYmxlV2lkdGggLz0gMjtcbiAgICAgIHZhciBsb2dpY2FsU3BhY2UsXG4gICAgICAgIHdpZHRoID0gMCxcbiAgICAgICAgaGVpZ2h0ID0gMCxcbiAgICAgICAgaSxcbiAgICAgICAgbG47XG5cbiAgICAgIGZvciAoaSA9IDAsIGxuID0gdGhpcy50b29sYmFycy5sZW5ndGg7IGkgPCBsbjsgaSsrKSB7XG4gICAgICAgIGxvZ2ljYWxTcGFjZSA9IHRoaXMudG9vbGJhcnNbaV0uZ2V0TG9naWNhbFNwYWNlKGF2YWlsYWJsZVdpZHRoLCBhdmFpbGFibGVIZWlnaHQpO1xuICAgICAgICB3aWR0aCA9IE1hdGgubWF4KGxvZ2ljYWxTcGFjZS53aWR0aCwgd2lkdGgpO1xuICAgICAgICBoZWlnaHQgKz0gbG9naWNhbFNwYWNlLmhlaWdodDtcbiAgICAgICAgdGhpcy50b29sYmFyc1tpXS53aWR0aCA9IGxvZ2ljYWxTcGFjZS53aWR0aDtcbiAgICAgICAgdGhpcy50b29sYmFyc1tpXS5oZWlnaHQgPSBsb2dpY2FsU3BhY2UuaGVpZ2h0O1xuICAgICAgfVxuICAgICAgaGVpZ2h0ICs9IHRoaXMucGFkZGluZztcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdpZHRoOiB3aWR0aCA+IGF2YWlsYWJsZVdpZHRoID8gMCA6IHdpZHRoLFxuICAgICAgICBoZWlnaHQ6IGhlaWdodCA+IGF2YWlsYWJsZUhlaWdodCA/IDAgOiBoZWlnaHRcbiAgICAgIH07XG4gICAgfTtcblxuICAgIHBsYWNlSW5DYW52YXMgKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgc2VsZi5wYWRkaW5nID0gNTtcbiAgICAgIHNlbGYuc3BhY2VNYW5hZ2VySW5zdGFuY2UuYWRkKFt7XG4gICAgICAgIG5hbWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gJ1Rvb2xCb3hFeHQnO1xuICAgICAgICB9LFxuICAgICAgICByZWY6IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICByZXR1cm4gb2JqWycwJ107XG4gICAgICAgIH0sXG4gICAgICAgIHNlbGY6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gc2VsZjtcbiAgICAgICAgfSxcbiAgICAgICAgcHJpb3JpdHk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gMjtcbiAgICAgICAgfSxcbiAgICAgICAgbGF5b3V0OiBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgcmV0dXJuIG9iai5pbmxpbmU7XG4gICAgICAgIH0sXG4gICAgICAgIG9yaWVudGF0aW9uOiBbe1xuICAgICAgICAgIHR5cGU6IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBvYmouaG9yaXpvbnRhbDtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHBvc2l0aW9uOiBbe1xuICAgICAgICAgICAgdHlwZTogZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgICByZXR1cm4gb2JqLnRvcDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhbGlnbm1lbnQ6IFt7XG4gICAgICAgICAgICAgIHR5cGU6IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqLnJpZ2h0O1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBkaW1lbnNpb25zOiBbZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBwYXJlbnQgPSB0aGlzLmdldFBhcmVudENvbXBvbmVudEdyb3VwKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuZ2V0TG9naWNhbFNwYWNlKHBhcmVudC5nZXRXaWR0aCgpLCBwYXJlbnQuZ2V0SGVpZ2h0KCkpO1xuICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgfV1cbiAgICAgICAgICB9XVxuICAgICAgICB9XVxuICAgICAgfV0pO1xuICAgIH07XG5cbiAgICBzZXREcmF3aW5nQ29uZmlndXJhdGlvbiAoeCwgeSwgd2lkdGgsIGhlaWdodCwgZ3JvdXApIHtcbiAgICAgIHZhciBtZXMgPSB0aGlzLm1lYXN1cmVtZW50O1xuICAgICAgbWVzLnggPSB4O1xuICAgICAgbWVzLnkgPSB5O1xuICAgICAgbWVzLndpZHRoID0gd2lkdGg7XG4gICAgICBtZXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXG4gICAgICB0aGlzLnBhcmVudEdyb3VwID0gZ3JvdXA7XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBkcmF3ICh4LCB5LCB3aWR0aCwgaGVpZ2h0LCBncm91cCkge1xuICAgICAgdmFyIG1lYXN1cmVtZW50ID0gdGhpcy5tZWFzdXJlbWVudCxcbiAgICAgICAgdG9vbGJhcnMgPSB0aGlzLnRvb2xiYXJzLFxuICAgICAgICBsbixcbiAgICAgICAgaSxcbiAgICAgICAgdG9vbGJhcjtcbiAgICAgIHggPSB4ID09PSB1bmRlZmluZWQgPyBtZWFzdXJlbWVudC54IDogeDtcbiAgICAgIHkgPSB5ID09PSB1bmRlZmluZWQgPyBtZWFzdXJlbWVudC55IDogeTtcbiAgICAgIHdpZHRoID0gd2lkdGggPT09IHVuZGVmaW5lZCA/IG1lYXN1cmVtZW50LndpZHRoIDogd2lkdGg7XG4gICAgICBoZWlnaHQgPSBoZWlnaHQgPT09IHVuZGVmaW5lZCA/IG1lYXN1cmVtZW50LmhlaWdodCA6IGhlaWdodDtcbiAgICAgIGdyb3VwID0gZ3JvdXAgPT09IHVuZGVmaW5lZCA/IHRoaXMucGFyZW50R3JvdXAgOiBncm91cDtcbiAgICAgIGlmICh3aWR0aCAmJiBoZWlnaHQpIHtcbiAgICAgICAgZm9yIChpID0gMCwgbG4gPSB0b29sYmFycy5sZW5ndGg7IGkgPCBsbjsgaSsrKSB7XG4gICAgICAgICAgdG9vbGJhciA9IHRvb2xiYXJzW2ldO1xuICAgICAgICAgIHRvb2xiYXIuZHJhdyh4LCB5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH07XG4gIEZ1c2lvbkNoYXJ0cy5yZWdpc3RlckNvbXBvbmVudCgnZXh0ZW5zaW9ucycsICdncm93dGgtYW5hbHlzZXItZXh0JywgR3Jvd3RoQW5hbHlzZXJFeHQpO1xufV0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2V4dGVuc2lvbi5qcyIsIid1c2Ugc3RyaWN0JztcbmNsYXNzIEdyb3d0aEFuYWx5c2VyIHtcbiAgY29uc3RydWN0b3IgKGRhdGEpIHtcbiAgICB0aGlzLmRhdGEgPSBkYXRhLm1hcCgoYSkgPT4ge1xuICAgICAgcmV0dXJuIGEubWFwKChiKSA9PiB7IHJldHVybiBiOyB9KTtcbiAgICB9KTtcbiAgICB0aGlzLkZvcm11bGFlID0gRm9ybXVsYWU7XG4gIH1cbiAgYW5hbHlzZSAobW9kZSkge1xuICAgIGxldCBpID0gMCxcbiAgICAgIGlpID0gMCxcbiAgICAgIGogPSAwLFxuICAgICAgamogPSAwLFxuICAgICAgbnVtID0gMCxcbiAgICAgIGNoZWNrQXJyID0gW10sXG4gICAgICBjaGVja051bSA9IDAsXG4gICAgICBkYXRhQXIgPSB0aGlzLmRhdGEsXG4gICAgICBuRGF0YUFyID0gW10sXG4gICAgICB0ZW1wQXIgPSBbXSxcbiAgICAgIHRlbXAgPSAwO1xuICAgIGlmICh0eXBlb2YgbW9kZSA9PT0gJ3N0cmluZycgJiYgbW9kZS50b0xvd2VyQ2FzZSgpID09PSAncmVzZXQnKSB7XG4gICAgICByZXR1cm4gZGF0YUFyLm1hcCgoYSkgPT4ge1xuICAgICAgICByZXR1cm4gYS5tYXAoKGIpID0+IHsgcmV0dXJuIGI7IH0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICghaXNOYU4obW9kZSkpIHsgLy8gSGFuZGxpbmcgYSBudW1iZXJcbiAgICAgIGNoZWNrTnVtID0gK21vZGU7XG4gICAgICBmb3IgKGkgPSAwLCBpaSA9IGRhdGFBci5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgIHRlbXBBciA9IFtdO1xuICAgICAgICBmb3IgKGogPSAwLCBqaiA9IGRhdGFBcltpXS5sZW5ndGg7IGogPCBqajsgKytqKSB7XG4gICAgICAgICAgbnVtID0gZGF0YUFyW2ldW2pdO1xuICAgICAgICAgIHRlbXBBci5wdXNoKDEwMCAqIChudW0gLSBjaGVja051bSkgLyBjaGVja051bSk7XG4gICAgICAgIH1cbiAgICAgICAgbkRhdGFBci5wdXNoKHRlbXBBcik7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbW9kZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG1vZGUgPSB0aGlzLkZvcm11bGFlW21vZGVdO1xuICAgICAgZm9yIChpID0gMCwgaWkgPSBkYXRhQXIubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICB0ZW1wQXIgPSBbXTtcbiAgICAgICAgY2hlY2tOdW0gPSBtb2RlKGRhdGFBcltpXSk7XG4gICAgICAgIGZvciAoaiA9IDAsIGpqID0gZGF0YUFyW2ldLmxlbmd0aDsgaiA8IGpqOyArK2opIHtcbiAgICAgICAgICBudW0gPSBkYXRhQXJbaV1bal07XG4gICAgICAgICAgaWYgKGNoZWNrTnVtID09PSAwKSB7XG4gICAgICAgICAgICB0ZW1wID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0ZW1wID0gMTAwICogKG51bSAtIGNoZWNrTnVtKSAvIGNoZWNrTnVtO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0ZW1wQXIucHVzaCh0ZW1wKTtcbiAgICAgICAgfVxuICAgICAgICBuRGF0YUFyLnB1c2godGVtcEFyKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFpc05hTihtb2RlLnJlbHBvc2l0aW9uKSkge1xuICAgICAgbW9kZSA9IG1vZGUucmVscG9zaXRpb247XG4gICAgICBmb3IgKGkgPSAwLCBpaSA9IGRhdGFBci5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgIHRlbXBBciA9IFtdO1xuICAgICAgICBmb3IgKGogPSAwLCBqaiA9IGRhdGFBcltpXS5sZW5ndGg7IGogPCBqajsgKytqKSB7XG4gICAgICAgICAgbnVtID0gZGF0YUFyW2ldW2pdO1xuICAgICAgICAgIGlmIChqICsgbW9kZSA+PSAwICYmIGogKyBtb2RlIDwgamopIHtcbiAgICAgICAgICAgIGNoZWNrTnVtID0gZGF0YUFyW2ldW2ogKyBtb2RlXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2hlY2tOdW0gPSBudW07XG4gICAgICAgICAgfVxuICAgICAgICAgIHRlbXBBci5wdXNoKDEwMCAqIChudW0gLSBjaGVja051bSkgLyBjaGVja051bSk7XG4gICAgICAgIH1cbiAgICAgICAgbkRhdGFBci5wdXNoKHRlbXBBcik7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghaXNOYU4obW9kZS5wb3NpdGlvbikgfHwgdHlwZW9mIG1vZGUucG9zaXRpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICBtb2RlID0gbW9kZS5wb3NpdGlvbjtcbiAgICAgIGZvciAoaSA9IDAsIGlpID0gZGF0YUFyLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgdGVtcEFyID0gW107XG4gICAgICAgIGZvciAoaiA9IDAsIGpqID0gZGF0YUFyW2ldLmxlbmd0aDsgaiA8IGpqOyArK2opIHtcbiAgICAgICAgICBudW0gPSBkYXRhQXJbaV1bal07XG4gICAgICAgICAgaWYgKG1vZGUgPT09ICdsYXN0Jykge1xuICAgICAgICAgICAgY2hlY2tOdW0gPSBkYXRhQXJbaV1bamogLSAxXTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG1vZGUgPT09ICdtaWQnKSB7XG4gICAgICAgICAgICBjaGVja051bSA9IGRhdGFBcltpXVtqaiAvIDJdO1xuICAgICAgICAgIH0gZWxzZSBpZiAobW9kZSA+PSAwICYmIG1vZGUgPCBqaikge1xuICAgICAgICAgICAgY2hlY2tOdW0gPSBkYXRhQXJbaV1bbW9kZV07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoZWNrTnVtID0gbnVtO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0ZW1wQXIucHVzaCgxMDAgKiAobnVtIC0gY2hlY2tOdW0pIC8gY2hlY2tOdW0pO1xuICAgICAgICB9XG4gICAgICAgIG5EYXRhQXIucHVzaCh0ZW1wQXIpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWlzTmFOKG1vZGUucmVsZGF0YXNldHBvc2l0aW9uKSkge1xuICAgICAgbW9kZSA9IG1vZGUucmVsZGF0YXNldHBvc2l0aW9uO1xuICAgICAgZm9yIChpID0gMCwgaWkgPSBkYXRhQXIubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICB0ZW1wQXIgPSBbXTtcbiAgICAgICAgaWYgKGkgKyBtb2RlID49IDAgJiYgaSArIG1vZGUgPCBpaSkge1xuICAgICAgICAgIGNoZWNrQXJyID0gZGF0YUFyW2kgKyBtb2RlXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGVja0FyciA9IGRhdGFBcltpXTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGogPSAwLCBqaiA9IGRhdGFBcltpXS5sZW5ndGg7IGogPCBqajsgKytqKSB7XG4gICAgICAgICAgY2hlY2tOdW0gPSBjaGVja0FycltqXTtcbiAgICAgICAgICBudW0gPSBkYXRhQXJbaV1bal07XG4gICAgICAgICAgdGVtcEFyLnB1c2goMTAwICogKG51bSAtIGNoZWNrTnVtKSAvIG51bSk7XG4gICAgICAgIH1cbiAgICAgICAgbkRhdGFBci5wdXNoKHRlbXBBcik7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoaSA9IDAsIGlpID0gbkRhdGFBci5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICBmb3IgKGogPSAwLCBqaiA9IG5EYXRhQXJbaV0ubGVuZ3RoOyBqIDwgamo7ICsraikge1xuICAgICAgICBpZiAoIU51bWJlci5pc0Zpbml0ZShuRGF0YUFyW2ldW2pdKSkge1xuICAgICAgICAgIG5EYXRhQXJbaV1bal0gPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHZhciByb3VuZFRvVHdvID0gKG51bSkgPT4ge1xuICAgICAgcmV0dXJuICsoTWF0aC5yb3VuZChudW0gKyAnZSsyJykgKyAnZS0yJyk7XG4gICAgfTtcbiAgICAvLyBSb3VuZGluZyB2YWx1ZXNcbiAgICBmb3IgKGkgPSAwLCBpaSA9IG5EYXRhQXIubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgZm9yIChqID0gMCwgamogPSBuRGF0YUFyW2ldLmxlbmd0aDsgaiA8IGpqOyArK2opIHtcbiAgICAgICAgbkRhdGFBcltpXVtqXSA9IHJvdW5kVG9Ud28obkRhdGFBcltpXVtqXSk7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoaSA9IG5EYXRhQXIubGVuZ3RoOyBpLS07KSB7XG4gICAgICBmb3IgKGogPSBuRGF0YUFyW2ldLmxlbmd0aDsgai0tOykge1xuICAgICAgICB0ZW1wID0gcGFyc2VJbnQobkRhdGFBcltpXVtqXSAqIDEwMCk7XG4gICAgICAgIG5EYXRhQXJbaV1bal0gPSB0ZW1wIC8gMTAwO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbkRhdGFBcjtcbiAgfVxufVxuXG52YXIgRm9ybXVsYWUgPSB7XG4gIE1pbmltdW06IChhcnIpID0+IHtcbiAgICByZXR1cm4gYXJyLnJlZHVjZSgoYSwgYikgPT4ge1xuICAgICAgcmV0dXJuIGEgPiBiID8gYiA6IGE7XG4gICAgfSk7XG4gIH0sXG4gIE1heGltdW06IChhcnIpID0+IHtcbiAgICByZXR1cm4gYXJyLnJlZHVjZSgoYSwgYikgPT4ge1xuICAgICAgcmV0dXJuIGEgPCBiID8gYiA6IGE7XG4gICAgfSk7XG4gIH0sXG4gIE1lYW46IChhcnIpID0+IHtcbiAgICByZXR1cm4gYXJyLnJlZHVjZSgoYSwgYikgPT4ge1xuICAgICAgcmV0dXJuIGEgKyBiO1xuICAgIH0pIC8gYXJyLmxlbmd0aDtcbiAgfSxcbiAgTWVkaWFuOiAoYXJyKSA9PiB7XG4gICAgcmV0dXJuIGFyci5tYXAoKGEpID0+IGEpLnNvcnQoKGEsIGIpID0+IHsgcmV0dXJuIGEgLSBiOyB9KVthcnIubGVuZ3RoIC8gMl07XG4gIH0sXG4gICdTdGFuZGFyZCBEZXZpYXRpb24nOiAodmFsdWVzKSA9PiB7XG4gICAgZnVuY3Rpb24gYXZlcmFnZSAoZGF0YSkge1xuICAgICAgdmFyIHN1bSwgYXZnO1xuICAgICAgc3VtID0gZGF0YS5yZWR1Y2UoZnVuY3Rpb24gKHN1bSwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHN1bSArIHZhbHVlO1xuICAgICAgfSwgMCk7XG5cbiAgICAgIGF2ZyA9IHN1bSAvIGRhdGEubGVuZ3RoO1xuICAgICAgcmV0dXJuIGF2ZztcbiAgICB9XG4gICAgdmFyIGF2ZyA9IDAsXG4gICAgICBzcXVhcmVEaWZmcyA9IDAsXG4gICAgICBzcXJEaWZmID0gMCxcbiAgICAgIGF2Z1NxdWFyZURpZmYgPSAwLFxuICAgICAgc3RkRGV2ID0gMCxcbiAgICAgIGRpZmYgPSAwO1xuICAgIGF2ZyA9IGF2ZXJhZ2UodmFsdWVzKTtcbiAgICBzcXVhcmVEaWZmcyA9IHZhbHVlcy5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBkaWZmID0gdmFsdWUgLSBhdmc7XG4gICAgICBzcXJEaWZmID0gZGlmZiAqIGRpZmY7XG4gICAgICByZXR1cm4gc3FyRGlmZjtcbiAgICB9KTtcbiAgICBhdmdTcXVhcmVEaWZmID0gYXZlcmFnZShzcXVhcmVEaWZmcyk7XG4gICAgc3RkRGV2ID0gTWF0aC5zcXJ0KGF2Z1NxdWFyZURpZmYpO1xuICAgIHJldHVybiBzdGREZXY7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gR3Jvd3RoQW5hbHlzZXI7XG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9ncm93dGhhbmFseXNlci5qcyJdLCJzb3VyY2VSb290IjoiIn0=