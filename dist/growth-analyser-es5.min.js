!function(t){function e(i){if(n[i])return n[i].exports;var o=n[i]={exports:{},id:i,loaded:!1};return t[i].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){"use strict";var i=n(1);FusionCharts.register("extension",["private","legend-ext",function(){function t(){this.toolbox=FusionCharts.getComponent("api","toolbox"),this.HorizontalToolbar=this.toolbox.HorizontalToolbar,this.ComponentGroup=this.toolbox.ComponentGroup,this.SymbolStore=this.toolbox.SymbolStore}t.prototype.constructor=t,t.prototype.renderChange=function(){var t=this.tsObject.chartInstance,e=t.apiInstance.getComponentStore(),n=0;for(n=0;e.getCanvasByIndex(n);++n)e.getCanvasByIndex(n).getComposition().PlotManager.plot()},t.prototype.analyser=function(t){var e,n=this.ga||{},o=this.tsObject.apiInstance.getComponentStore(),a=o.getCanvasByIndex(0),r=(o.getNavigatorByIndex(0),a.getComposition()),s=n.ds||r.dataset,l=n.idMap||{},h=n.storeAr||[],p=[],c=a.composition.yAxis;if("reset"===t?c.getScaleObj().getIntervalObj().getConfig("intervals").major.formatter=function(t){return t}:c.getScaleObj().getIntervalObj().getConfig("intervals").major.formatter=function(t){return t+"%"},this.ga=n,!n.storeAr&&(o={},!n.idMap)){s.forEachSeries(function(t,e,n,i){o[i.getId()]=i.getOriginalData()});for(e in o)h.push(o[e]),l[e]=h.length-1;n.idMap=l,n.ds=s,n.storeAr=h,n.gAnalyser=new i(h)}p=n.gAnalyser.analyse(t),s.setDataBySeries(function(t){p.length&&t.setOriginalData(p[l[t.getId()]])}),r.impl.update()},t.prototype.init=function(t){var e=this;return t(["xAxis","yAxis","graphics","chart","dataset","PlotManager","canvasConfig","MarkerManager","reactiveModel","globalReactiveModel","spaceManagerInstance","smartLabel","chartInstance","canvasData",function(t,n,i,o,a,r,s,l,h,p,c,u,d,g){e.xAxis=t,e.yAxis=n,e.graphics=i,e.chart=o,e.dataset=a,e.plotManager=r,e.markerManager=l,e.canvasConfig=s,e.reactiveModel=h,e.globalReactiveModel=p,e.spaceManagerInstance=c,e.smartLabel=u,e.chartInstance=d,e.canvasData=g}]),this.spaceManagerInstance=e.spaceManagerInstance,this.globalReactiveModel=e.globalReactiveModel,this.tsObject=e.chartInstance,this.startDt=e.globalReactiveModel.model["x-axis-visible-range-start"],this.endDt=e.globalReactiveModel.model["x-axis-visible-range-end"],this.startDataset=e.globalReactiveModel.model["x-axis-absolute-range-start"],this.endDataset=e.globalReactiveModel.model["x-axis-absolute-range-end"],this.toolbars=[],this.measurement={},this.toolbars.push(this.createToolbar()),this},t.prototype.createToolbar=function(){var t,e,n,i,o=this,a=[],r={},s=this.graphics.paper,l=this.graphics.container,h={"font-size":"12px",color:"#696969",fontFamily:"Myriad Pro"},p={"font-size":"13px",color:"#696969","font-family":"Myriad Pro Semibold"};t=new this.HorizontalToolbar({paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container}),t.setConfig({fill:"#fff",borderThickness:0}),e=new this.toolbox.ComponentGroup({paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container}),e.setConfig({fill:"#fff",borderThickness:0}),r={"Fixed-Number":"dialogBox",Functions:["Minimum","Maximum","Mean","Median","Standard Deviation"],Position:"dialogBox",Dataset:["Previous Dataset","Next Dataset"],"Relative-Position":["Next","Previous"]},n=new this.toolbox.SymbolWithContext("ContextIcon",{paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container},{width:24,height:24,position:"right",stroke:"#ced5d4",strokeWidth:"1",radius:"1",symbolStroke:"#696969",symbolStrokeWidth:"2"}),a.push({"Growth Analyser":{style:p}}),i=function(t){function e(){r.element.value=r.element.value.replace(/[^\d.-]/g,"")}var n,i,o,a,r,h,p={fontSize:"10px",lineHeight:"15px",fontFamily:"Lucida Grande",stroke:"#676767","stroke-width":"2"},c=180,u=500,d=100;n=s.html("div",{fill:"#f7f7f7",x:u-200,y:d+100,width:180,height:80},p,l),i=s.html("div",{fill:"#e8e8e8",width:c,height:20},p,n),o=s.html("div",{fill:"transparent",width:.6*c,height:20,x:10,y:2},p,i),o.attr({text:"Provide Specific Value"}),a=s.html("div",{fill:"transparent",width:10,height:10,position:"relative",float:"right",text:"X",cursor:"pointer"},p,i),a.on("click",function(){n.hide()}),r=s.html("input",{width:100,height:20,x:10,y:30},p,n),h=s.html("div",{width:50,height:20,x:120,y:30,fill:"#555555"},{fontSize:"10px",lineHeight:"15px",fontFamily:"Lucida Grande",fill:"#eaeaea",color:"#eaeaea",stroke:"#eaeaea",cursor:"pointer"},n),h.on("click",function(){n.hide(),t(r.val())}),h.attr({text:"Apply"}),r.element.focus(),r.element.addEventListener("keyup",e),a.element.style.position="relative",a.element.style.backgroundColor="#d2d2d2",a.element.style.border="2px solid #cbcbcb",a.element.style.padding="0px 0px 3.5px 2px",a.element.style.color="#8c8c8c",a.element.style.margin="1px 2px",a.element.style.float="right",r.element.style.marginTop="8px",r.element.style.border="2px solid #dadbda",h.element.style.marginTop="8px",n.element.style.border="1px solid #d4d2d3",i.element.style.border="1px solid #d4d2d3",i.element.style.width="179px",o.element.style.fontSize="11.5px",o.element.style.marginTop="0.5px",o.element.style.color="#676767",i.element.style.fontFamily="Myriad pro Semibold",h.element.style.textAlign="center",h.element.style.fontSize="11px",h.element.style.paddingTop="3px",h.element.style.borderRadius="3px",h.element.style.color="#e4e4e4"};var c=function(t){var e=void 0,n={},s={};if("dialogBox"===r[t])e="&nbsp; &nbsp; "+t,n[e]={},n[e]={style:h,handler:function(){if("Fixed-Number"===t){i(function(t){o.analyser(parseInt(t))})}else if("Position"===t){i(function(t){o.analyser({position:t})})}},action:"click"};else{e="&#9666&nbsp; "+t,n[e]={},n[e].action="click",n[e].style=h,n[e].handler=[];for(var l=function(i){var a=r[t][i];s={},s["&nbsp;"+a]={},s["&nbsp;"+a].handler=function(){"Minimum"===a||"Maximum"===a||"Mean"===a||"Median"===a||"Standard Deviation"===a?o.analyser(a):"Previous Dataset"===a?o.analyser({reldatasetposition:-1}):"Next Dataset"===a?o.analyser({reldatasetposition:1}):"Next"===a?o.analyser({relposition:-1}):"Previous"===a&&o.analyser({relposition:1})},s["&nbsp;"+a].action="click",s["&nbsp;"+a].style=h,n[e].handler.push(s),i!==r[t].length-1&&n[e].handler.push({"":{style:{backgroundColor:"#d5d2d2",height:"1px",margin:"1px",padding:"0px"}}})},p=0;p<r[t].length;p++)l(p)}a.push(n),a.push({"":{style:{backgroundColor:"#d5d2d2",height:"1px",margin:"1px",padding:"0px"}}})};for(var u in r)c(u);return a.push({"&nbsp; &nbsp; Reset View":{handler:function(){o.analyser("reset")},action:"click",style:h}}),n.appendAsList(a),this.SymbolStore.register("ContextIcon",function(t,e,n){var i=t,o=e,a=2*n,r=Math.round(a/4),s=.7*Math.round(a/2),l=i-s,h=i+s,p=o+r,c=o-r;return["M",l,o,"L",h,o,"M",l,p,"L",h,p,"M",l,c,"L",h,c]}),e.addSymbol(n),t.addComponent(e),t},t.prototype.getLogicalSpace=function(t,e){t/=2;var n,i,o,a=0,r=0;for(i=0,o=this.toolbars.length;i<o;i++)n=this.toolbars[i].getLogicalSpace(t,e),a=Math.max(n.width,a),r+=n.height,this.toolbars[i].width=n.width,this.toolbars[i].height=n.height;return r+=this.padding,{width:a>t?0:a,height:r>e?0:r}},t.prototype.placeInCanvas=function(){var t=this;t.padding=5,t.spaceManagerInstance.add([{name:function(){return"ToolBoxExt"},ref:function(t){return t[0]},self:function(){return t},priority:function(){return 2},layout:function(t){return t.inline},orientation:[{type:function(t){return t.horizontal},position:[{type:function(t){return t.top},alignment:[{type:function(t){return t.right},dimensions:[function(){var e=this.getParentComponentGroup();return t.getLogicalSpace(e.getWidth(),e.getHeight())}]}]}]}]}])},t.prototype.setDrawingConfiguration=function(t,e,n,i,o){var a=this.measurement;return a.x=t,a.y=e,a.width=n,a.height=i,this.parentGroup=o,this},t.prototype.draw=function(t,e,n,i,o){var a,r,s,l=this.measurement,h=this.toolbars;if(t=void 0===t?l.x:t,e=void 0===e?l.y:e,n=void 0===n?l.width:n,i=void 0===i?l.height:i,o=void 0===o?this.parentGroup:o,n&&i)for(r=0,a=h.length;r<a;r++)s=h[r],s.draw(t,e)},FusionCharts.registerComponent("extensions","legendExt",t)}])},function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),o=function(){function t(e){n(this,t),this.data=e.map(function(t){return t.map(function(t){return t})}),this.Formulae=a}return i(t,[{key:"analyse",value:function(t){var e=0,n=0,i=0,o=0,a=0,r=[],s=0,l=this.data,h=[],p=[],c=0;if("string"==typeof t&&"reset"===t.toLowerCase())return l.map(function(t){return t.map(function(t){return t})});if(isNaN(t))if("string"==typeof t)for(t=this.Formulae[t],e=0,n=l.length;e<n;++e){for(p=[],s=t(l[e]),i=0,o=l[e].length;i<o;++i)a=l[e][i],c=0===s?void 0:100*(a-s)/s,p.push(c);h.push(p)}else if(isNaN(t.relposition))if(isNaN(t.position)){if(!isNaN(t.reldatasetposition))for(t=t.reldatasetposition,e=0,n=l.length;e<n;++e){for(p=[],r=e+t>=0&&e+t<n?l[e+t]:l[e],i=0,o=l[e].length;i<o;++i)s=r[i],a=l[e][i],p.push(100*(a-s)/a);h.push(p)}}else for(t=t.position,e=0,n=l.length;e<n;++e){for(p=[],i=0,o=l[e].length;i<o;++i)a=l[e][i],s=t>=0&&t<o?l[e][t]:a,p.push(100*(a-s)/s);h.push(p)}else for(t=t.relposition,e=0,n=l.length;e<n;++e){for(p=[],i=0,o=l[e].length;i<o;++i)a=l[e][i],s=i+t>=0&&i+t<o?l[e][i+t]:a,p.push(100*(a-s)/s);h.push(p)}else for(s=+t,e=0,n=l.length;e<n;++e){for(p=[],i=0,o=l[e].length;i<o;++i)a=l[e][i],p.push(100*(a-s)/s);h.push(p)}for(e=0,n=h.length;e<n;++e)for(i=0,o=h[e].length;i<o;++i)Number.isFinite(h[e][i])||(h[e][i]=null);return h}}]),t}(),a={Minimum:function(t){return t.reduce(function(t,e){return t>e?e:t})},Maximum:function(t){return t.reduce(function(t,e){return t<e?e:t})},Mean:function(t){return t.reduce(function(t,e){return t+e})/t.length},Median:function(t){return t.map(function(t){return t}).sort(function(t,e){return t-e})[t.length/2]},"Standard Deviation":function(t){function e(t){var e,n;return e=t.reduce(function(t,e){return t+e},0),n=e/t.length}var n=0,i=0,o=0,a=0,r=0,s=0;return n=e(t),i=t.map(function(t){return s=t-n,o=s*s}),a=e(i),r=Math.sqrt(a)}};t.exports=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,