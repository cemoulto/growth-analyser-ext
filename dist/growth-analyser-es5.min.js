!function(t){function e(i){if(n[i])return n[i].exports;var r=n[i]={exports:{},id:i,loaded:!1};return t[i].call(r.exports,r,r.exports,e),r.loaded=!0,r.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){"use strict";var i=n(1);FusionCharts.register("extension",["private","growth-analyser-ext",function(){function t(){this.toolbox=FusionCharts.getComponent("api","toolbox"),this.HorizontalToolbar=this.toolbox.HorizontalToolbar,this.ComponentGroup=this.toolbox.ComponentGroup,this.SymbolStore=this.toolbox.SymbolStore,window.a=this}t.prototype.constructor=t,t.prototype.renderChange=function(){var t=this.tsObject.chartInstance,e=t.apiInstance.getComponentStore(),n=0;for(n=0;e.getCanvasByIndex(n);++n)e.getCanvasByIndex(n).getComposition().PlotManager.plot()},t.prototype.analyser=function(t){var e,n=this.ga||{},r=this.tsObject.apiInstance.getComponentStore(),a=r.getCanvasByIndex(0),o=(r.getNavigatorByIndex(0),a.getComposition()),s=n.ds||o.dataset,l=n.idMap||{},h=n.storeAr||[],c=[],p=a.composition.yAxis;if("reset"===t?p.getScaleObj().getIntervalObj().getConfig("intervals").major.formatter=function(t){return t}:p.getScaleObj().getIntervalObj().getConfig("intervals").major.formatter=function(t){return t+"%"},this.ga=n,!n.storeAr&&(r={},!n.idMap)){s.forEachSeries(function(t,e,n,i){r[i.getId()]=i.getOriginalData()});for(e in r)h.push(r[e]),l[e]=h.length-1;n.idMap=l,n.ds=s,n.storeAr=h,n.gAnalyser=new i(h)}c=n.gAnalyser.analyse(t),s.setDataBySeries(function(t){c.length&&t.setOriginalData(c[l[t.getId()]])}),o.impl.update()},t.prototype.init=function(t){var e=this;return t(["xAxis","yAxis","graphics","chart","dataset","PlotManager","canvasConfig","MarkerManager","reactiveModel","globalReactiveModel","spaceManagerInstance","smartLabel","chartInstance","canvasData",function(t,n,i,r,a,o,s,l,h,c,p,u,d,f){e.xAxis=t,e.yAxis=n,e.graphics=i,e.chart=r,e.dataset=a,e.plotManager=o,e.markerManager=l,e.canvasConfig=s,e.reactiveModel=h,e.globalReactiveModel=c,e.spaceManagerInstance=p,e.smartLabel=u,e.chartInstance=d,e.canvasData=f}]),this.spaceManagerInstance=e.spaceManagerInstance,this.globalReactiveModel=e.globalReactiveModel,this.tsObject=e.chartInstance,this.startDt=e.globalReactiveModel.model["x-axis-visible-range-start"],this.endDt=e.globalReactiveModel.model["x-axis-visible-range-end"],this.startDataset=e.globalReactiveModel.model["x-axis-absolute-range-start"],this.endDataset=e.globalReactiveModel.model["x-axis-absolute-range-end"],this.toolbars=[],this.measurement={},this.toolbars.push(this.createToolbar()),this},t.prototype.createToolbar=function(){var t,e,n,i,r=this,a=[],o={},s=this.graphics.paper,l=this.graphics.container,h={"font-size":"12px",color:"#696969","font-family":'"Lucida Grande", Sans-serif'},c={"font-size":"13px",color:"#696969","font-family":'"Lucida Grande", Sans-serif',fontWeight:"bold"};t=new this.HorizontalToolbar({paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container}),t.setConfig({fill:"#fff",borderThickness:0}),e=new this.toolbox.ComponentGroup({paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container}),e.setConfig({fill:"#fff",borderThickness:0}),o={"First Index":{position:0},"Previous Index":{relposition:-1},"Specific Value":{submenu:!0,Minimum:"Minimum",Maximum:"Maximum",Mean:"Mean",Median:"Median","Standard Deviation":"Standard Deviation","Custom Value...":function(){i(function(t){return r.analyser(t)})}}},n=new this.toolbox.SymbolWithContext("ContextIcon",{paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container},{width:24,height:24,position:"right",stroke:"#f1f1f1",strokeWidth:"1",radius:"1",symbolStroke:"#bdbdbd",symbolStrokeWidth:"2"}),a.push({"Growth Analyser":{style:c}}),i=function(t){function e(){h.element.value=h.element.value.replace(/[^\d.-]/g,"")}var n,i,a,o,h,c,p={fontSize:"10px",lineHeight:"15px","font-family":'"Lucida Grande", Sans-serif',stroke:"#676767","stroke-width":"2"},u=180,d=.47*r.chart.width-90,f=r.chart.height/2-40;n=s.html("div",{fill:"#f7f7f7",x:d,y:f,width:180,height:80},p,l),i=s.html("div",{fill:"#e8e8e8",width:u,height:20},p,n),a=s.html("div",{fill:"transparent",width:.6*u,height:20,x:10,y:2},p,i),a.attr({text:"Provide value"}),o=s.html("div",{fill:"transparent",width:10,height:10,position:"relative",float:"right",text:"X",cursor:"pointer"},p,i),o.on("click",function(){n.hide()}),h=s.html("input",{width:100,height:20,x:10,y:30},p,n),c=s.html("div",{width:50,height:20,x:120,y:30,fill:"#555555"},{fontSize:"10px",lineHeight:"15px","font-family":'"Lucida Grande", Sans-serif',fill:"#eaeaea",color:"#eaeaea",stroke:"#eaeaea",cursor:"pointer"},n),c.on("click",function(){n.hide(),t(h.val())}),c.attr({text:"Apply"}),h.element.focus(),h.element.addEventListener("keyup",e),o.element.style.position="relative",o.element.style.backgroundColor="#d2d2d2",o.element.style.border="2px solid #cbcbcb",o.element.style.padding="0px 0px 3.5px 2px",o.element.style.color="#8c8c8c",o.element.style.margin="1px 2px",o.element.style.float="right",h.element.style.marginTop="8px",h.element.style.border="2px solid #dadbda",c.element.style.marginTop="8px",n.element.style.border="1px solid #d4d2d3",i.element.style.border="1px solid #d4d2d3",i.element.style.width="179px",a.element.style.fontSize="11.5px",a.element.style.marginTop="0.5px",a.element.style.color="#676767",i.element.style["font-family"]='"Lucida Grande", Sans-serif',c.element.style.textAlign="center",c.element.style.fontSize="11px",c.element.style.paddingTop="3px",c.element.style.borderRadius="3px",c.element.style.color="#e4e4e4"};var p=function(t){var e=void 0,n={},i={};if(o[t].submenu){e="&#9666&nbsp; "+t,n[e]={},n[e].action="click",n[e].style=h,n[e].handler=[];var s=function(a){var s=a,l=o[t][a];return"submenu"===a?"continue":(i={},i["&nbsp;"+s]={},i["&nbsp;"+s].handler=function(){"function"==typeof l?l():r.analyser(l)},i["&nbsp;"+s].action="click",i["&nbsp;"+s].style=h,n[e].handler.push(i),void(a!==o[t].length-1&&n[e].handler.push({"":{style:{backgroundColor:"#d5d2d2",height:"1px",margin:"1px",padding:"0px"}}})))};for(var l in o[t]){s(l)}}else e="&nbsp; &nbsp; "+t,n[e]={},n[e]={style:h,handler:function(){r.analyser(o[t])},action:"click"};a.push(n),a.push({"":{style:{backgroundColor:"#d5d2d2",height:"1px",margin:"1px",padding:"0px"}}})};for(var u in o)p(u);return a.push({"&nbsp; &nbsp; Reset View":{handler:function(){r.analyser("reset")},action:"click",style:h}}),n.appendAsList(a),this.SymbolStore.register("ContextIcon",function(t,e,n){var i=t,r=e,a=2*n,o=Math.round(a/4),s=.7*Math.round(a/2),l=i-s,h=i+s,c=r+o,p=r-o;return["M",l,r,"L",h,r,"M",l,c,"L",h,c,"M",l,p,"L",h,p]}),e.addSymbol(n),t.addComponent(e),t},t.prototype.getLogicalSpace=function(t,e){t/=2;var n,i,r,a=0,o=0;for(i=0,r=this.toolbars.length;i<r;i++)n=this.toolbars[i].getLogicalSpace(t,e),a=Math.max(n.width,a),o+=n.height,this.toolbars[i].width=n.width,this.toolbars[i].height=n.height;return o+=this.padding,{width:a>t?0:a,height:o>e?0:o}},t.prototype.placeInCanvas=function(){var t=this;t.padding=5,t.spaceManagerInstance.add([{name:function(){return"ToolBoxExt"},ref:function(t){return t[0]},self:function(){return t},priority:function(){return 2},layout:function(t){return t.inline},orientation:[{type:function(t){return t.horizontal},position:[{type:function(t){return t.top},alignment:[{type:function(t){return t.right},dimensions:[function(){var e=this.getParentComponentGroup();return t.getLogicalSpace(e.getWidth(),e.getHeight())}]}]}]}]}])},t.prototype.setDrawingConfiguration=function(t,e,n,i,r){var a=this.measurement;return a.x=t,a.y=e,a.width=n,a.height=i,this.parentGroup=r,this},t.prototype.draw=function(t,e,n,i,r){var a,o,s,l=this.measurement,h=this.toolbars;if(t=void 0===t?l.x:t,e=void 0===e?l.y:e,n=void 0===n?l.width:n,i=void 0===i?l.height:i,r=void 0===r?this.parentGroup:r,n&&i)for(o=0,a=h.length;o<a;o++)s=h[o],s.draw(t,e)},FusionCharts.registerComponent("extensions","GrowthAnalyserExt",t)}])},function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),r=function(){function t(e){n(this,t),this.data=e.map(function(t){return t.map(function(t){return t})}),this.Formulae=a}return i(t,[{key:"analyse",value:function(t){var e=0,n=0,i=0,r=0,a=0,o=[],s=0,l=this.data,h=[],c=[],p=0;if("string"==typeof t&&"reset"===t.toLowerCase())return l.map(function(t){return t.map(function(t){return t})});if(isNaN(t))if("string"==typeof t)for(t=this.Formulae[t],e=0,n=l.length;e<n;++e){for(c=[],s=t(l[e]),i=0,r=l[e].length;i<r;++i)a=l[e][i],p=0===s?void 0:100*(a-s)/s,c.push(p);h.push(c)}else if(isNaN(t.relposition))if(isNaN(t.position)&&"string"!=typeof t.position){if(!isNaN(t.reldatasetposition))for(t=t.reldatasetposition,e=0,n=l.length;e<n;++e){for(c=[],o=e+t>=0&&e+t<n?l[e+t]:l[e],i=0,r=l[e].length;i<r;++i)s=o[i],a=l[e][i],c.push(100*(a-s)/a);h.push(c)}}else for(t=t.position,e=0,n=l.length;e<n;++e){for(c=[],i=0,r=l[e].length;i<r;++i)a=l[e][i],s="last"===t?l[e][r-1]:"mid"===t?l[e][r/2]:t>=0&&t<r?l[e][t]:a,c.push(100*(a-s)/s);h.push(c)}else for(t=t.relposition,e=0,n=l.length;e<n;++e){for(c=[],i=0,r=l[e].length;i<r;++i)a=l[e][i],s=i+t>=0&&i+t<r?l[e][i+t]:a,c.push(100*(a-s)/s);h.push(c)}else for(s=+t,e=0,n=l.length;e<n;++e){for(c=[],i=0,r=l[e].length;i<r;++i)a=l[e][i],c.push(100*(a-s)/s);h.push(c)}for(e=0,n=h.length;e<n;++e)for(i=0,r=h[e].length;i<r;++i)Number.isFinite(h[e][i])||(h[e][i]=null);return h}}]),t}(),a={Minimum:function(t){return t.reduce(function(t,e){return t>e?e:t})},Maximum:function(t){return t.reduce(function(t,e){return t<e?e:t})},Mean:function(t){return t.reduce(function(t,e){return t+e})/t.length},Median:function(t){return t.map(function(t){return t}).sort(function(t,e){return t-e})[t.length/2]},"Standard Deviation":function(t){function e(t){var e,n;return e=t.reduce(function(t,e){return t+e},0),n=e/t.length}var n=0,i=0,r=0,a=0,o=0,s=0;return n=e(t),i=t.map(function(t){return s=t-n,r=s*s}),a=e(i),o=Math.sqrt(a)}};t.exports=r}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,