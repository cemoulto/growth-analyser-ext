(function(window, document, undefined) {
"use strict";

FusionCharts.register('extension', ['private', 'legend-ext', function () {
  function LegendExt () {}
  LegendExt.prototype.constructor = LegendExt;

  LegendExt.prototype.init = function (require) {
    var instance = this;
    require([
      'xAxis',
      'yAxis',
      'graphics',
      'chart',
      'dataset',
      'PlotManager',
      'canvasConfig',
      'MarkerManager',
      'reactiveModel',
      'globalReactiveModel',
      function (
        xAxis,
        yAxis,
        graphics,
        chart,
        dataset,
        plotManager,
        canvasConfig,
        markerManager,
        reactiveModel,
        globalReactiveModel) {
        instance.xAxis = xAxis;
        instance.yAxis = yAxis;
        instance.graphics = graphics;
        instance.chart = chart;
        instance.dataset = dataset;
        instance.plotManager = plotManager;
        instance.markerManager = markerManager;
        instance.canvasConfig = canvasConfig;
        instance.reactiveModel = reactiveModel;
        instance.globalReactiveModel = globalReactiveModel;
        console.log(arguments);
      }
    ]);
    return this;
  };
  LegendExt.prototype.getLogicalSpace = function () {
    return {
      width: 70,
      height: 30
    };
  };

  LegendExt.prototype.placeInCanvas = function (containerInstance) {
    var logicalSpace = this.getLogicalSpace();

    containerInstance.addComponent([{
      pIndex: 3,
      type: 'HorizontalSwimLane',
      components: [{
        type: 'VerticalSwimLane',
        components: [{
          width: logicalSpace.width,
          height: logicalSpace.height,
          name: 'LegendExt',
          x: function () {
            return this.get('x', 'Canvas0Group') + this.get('width', 'Canvas0Group') / 2 - logicalSpace.width;
          },
          type: 'Modules',
          ref: this
        }]
      }]
    }], 0);
  };

  LegendExt.prototype.draw = function (x, y, width, height) {
    var rect = this.graphics.paper.rect(0, 0, width, height);
    rect.attr('fill', '#349e26');
    rect.animate({
      fill: '#12978e',
      height: 10.23 * height,
      width: 8.4 * width
    }, 3000, 'linear');
  };

  LegendExt.prototype.dispose = function () {

  };

  FusionCharts.registerComponent('extensions', 'legendExt', LegendExt);
}]);

'use strict';
class GrowthAnalyser {
  constructor () {
    this.data = [
      [1, 2, 3, 4, 5, 6],
      [3, 4, 1, 2, 5, 9]
    ];
  }
  analyse (mode) {
    let i = 0,
      ii = 0,
      j = 0,
      jj = 0,
      num = 0,
      checkArr = [],
      checkNum = 0,
      dataAr = this.data,
      nDataAr = [],
      tempAr = [];

    if (!isNaN(mode)) { // Handling a number
      checkNum = mode;
      for (i = 0, ii = dataAr.length; i < ii; ++i) {
        tempAr = [];
        for (j = 0, jj = dataAr[i].length; j < jj; ++j) {
          num = dataAr[i][j];
          tempAr.push(100 * (num - checkNum) / num);
        }
        nDataAr.push(tempAr);
      }
    } else if (typeof mode === 'function') {
      for (i = 0, ii = dataAr.length; i < ii; ++i) {
        tempAr = [];
        checkNum = mode(dataAr[i]);
        for (j = 0, jj = dataAr[i].length; j < jj; ++j) {
          num = dataAr[i][j];
          tempAr.push(100 * (num - checkNum) / num);
        }
        nDataAr.push(tempAr);
      }
    } else if (!isNaN(mode.relposition)) {
      mode = mode.relposition;
      for (i = 0, ii = dataAr.length; i < ii; ++i) {
        tempAr = [];
        for (j = 0, jj = dataAr[i].length; j < jj; ++j) {
          num = dataAr[i][j];
          if (j + mode >= 0 && j + mode < jj) {
            checkNum = dataAr[i][j + mode];
          } else {
            checkNum = num;
          }
          tempAr.push(100 * (num - checkNum) / num);
        }
        nDataAr.push(tempAr);
      }
    } else if (!isNaN(mode.position)) {
      mode = mode.position;
      for (i = 0, ii = dataAr.length; i < ii; ++i) {
        tempAr = [];
        for (j = 0, jj = dataAr[i].length; j < jj; ++j) {
          num = dataAr[i][j];
          if (mode >= 0 && mode < jj) {
            checkNum = dataAr[i][mode];
          } else {
            checkNum = num;
          }
          tempAr.push(100 * (num - checkNum) / num);
        }
        nDataAr.push(tempAr);
      }
    } else if (!isNaN(mode.reldatasetposition)) {
      mode = mode.reldatasetposition;
      for (i = 0, ii = dataAr.length; i < ii; ++i) {
        tempAr = [];
        if (i + mode >= 0 && i + mode < ii) {
          checkArr = dataAr[i + mode];
        } else {
          checkArr = dataAr[i];
        }
        for (j = 0, jj = dataAr[i].length; j < jj; ++j) {
          checkNum = checkArr[j];
          num = dataAr[i][j];
          tempAr.push(100 * (num - checkNum) / num);
        }
        nDataAr.push(tempAr);
      }
    }
    return nDataAr;
  }
}
window.GrowthAnalyser = GrowthAnalyser;
}(this, document));

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlcyI6WyJjYW52YXNsaXRlLWVzNi5taW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbkZ1c2lvbkNoYXJ0cy5yZWdpc3RlcignZXh0ZW5zaW9uJywgWydwcml2YXRlJywgJ2xlZ2VuZC1leHQnLCBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIExlZ2VuZEV4dCAoKSB7fVxuICBMZWdlbmRFeHQucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTGVnZW5kRXh0O1xuXG4gIExlZ2VuZEV4dC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIChyZXF1aXJlKSB7XG4gICAgdmFyIGluc3RhbmNlID0gdGhpcztcbiAgICByZXF1aXJlKFtcbiAgICAgICd4QXhpcycsXG4gICAgICAneUF4aXMnLFxuICAgICAgJ2dyYXBoaWNzJyxcbiAgICAgICdjaGFydCcsXG4gICAgICAnZGF0YXNldCcsXG4gICAgICAnUGxvdE1hbmFnZXInLFxuICAgICAgJ2NhbnZhc0NvbmZpZycsXG4gICAgICAnTWFya2VyTWFuYWdlcicsXG4gICAgICAncmVhY3RpdmVNb2RlbCcsXG4gICAgICAnZ2xvYmFsUmVhY3RpdmVNb2RlbCcsXG4gICAgICBmdW5jdGlvbiAoXG4gICAgICAgIHhBeGlzLFxuICAgICAgICB5QXhpcyxcbiAgICAgICAgZ3JhcGhpY3MsXG4gICAgICAgIGNoYXJ0LFxuICAgICAgICBkYXRhc2V0LFxuICAgICAgICBwbG90TWFuYWdlcixcbiAgICAgICAgY2FudmFzQ29uZmlnLFxuICAgICAgICBtYXJrZXJNYW5hZ2VyLFxuICAgICAgICByZWFjdGl2ZU1vZGVsLFxuICAgICAgICBnbG9iYWxSZWFjdGl2ZU1vZGVsKSB7XG4gICAgICAgIGluc3RhbmNlLnhBeGlzID0geEF4aXM7XG4gICAgICAgIGluc3RhbmNlLnlBeGlzID0geUF4aXM7XG4gICAgICAgIGluc3RhbmNlLmdyYXBoaWNzID0gZ3JhcGhpY3M7XG4gICAgICAgIGluc3RhbmNlLmNoYXJ0ID0gY2hhcnQ7XG4gICAgICAgIGluc3RhbmNlLmRhdGFzZXQgPSBkYXRhc2V0O1xuICAgICAgICBpbnN0YW5jZS5wbG90TWFuYWdlciA9IHBsb3RNYW5hZ2VyO1xuICAgICAgICBpbnN0YW5jZS5tYXJrZXJNYW5hZ2VyID0gbWFya2VyTWFuYWdlcjtcbiAgICAgICAgaW5zdGFuY2UuY2FudmFzQ29uZmlnID0gY2FudmFzQ29uZmlnO1xuICAgICAgICBpbnN0YW5jZS5yZWFjdGl2ZU1vZGVsID0gcmVhY3RpdmVNb2RlbDtcbiAgICAgICAgaW5zdGFuY2UuZ2xvYmFsUmVhY3RpdmVNb2RlbCA9IGdsb2JhbFJlYWN0aXZlTW9kZWw7XG4gICAgICAgIGNvbnNvbGUubG9nKGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgXSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIExlZ2VuZEV4dC5wcm90b3R5cGUuZ2V0TG9naWNhbFNwYWNlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICB3aWR0aDogNzAsXG4gICAgICBoZWlnaHQ6IDMwXG4gICAgfTtcbiAgfTtcblxuICBMZWdlbmRFeHQucHJvdG90eXBlLnBsYWNlSW5DYW52YXMgPSBmdW5jdGlvbiAoY29udGFpbmVySW5zdGFuY2UpIHtcbiAgICB2YXIgbG9naWNhbFNwYWNlID0gdGhpcy5nZXRMb2dpY2FsU3BhY2UoKTtcblxuICAgIGNvbnRhaW5lckluc3RhbmNlLmFkZENvbXBvbmVudChbe1xuICAgICAgcEluZGV4OiAzLFxuICAgICAgdHlwZTogJ0hvcml6b250YWxTd2ltTGFuZScsXG4gICAgICBjb21wb25lbnRzOiBbe1xuICAgICAgICB0eXBlOiAnVmVydGljYWxTd2ltTGFuZScsXG4gICAgICAgIGNvbXBvbmVudHM6IFt7XG4gICAgICAgICAgd2lkdGg6IGxvZ2ljYWxTcGFjZS53aWR0aCxcbiAgICAgICAgICBoZWlnaHQ6IGxvZ2ljYWxTcGFjZS5oZWlnaHQsXG4gICAgICAgICAgbmFtZTogJ0xlZ2VuZEV4dCcsXG4gICAgICAgICAgeDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KCd4JywgJ0NhbnZhczBHcm91cCcpICsgdGhpcy5nZXQoJ3dpZHRoJywgJ0NhbnZhczBHcm91cCcpIC8gMiAtIGxvZ2ljYWxTcGFjZS53aWR0aDtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHR5cGU6ICdNb2R1bGVzJyxcbiAgICAgICAgICByZWY6IHRoaXNcbiAgICAgICAgfV1cbiAgICAgIH1dXG4gICAgfV0sIDApO1xuICB9O1xuXG4gIExlZ2VuZEV4dC5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uICh4LCB5LCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgdmFyIHJlY3QgPSB0aGlzLmdyYXBoaWNzLnBhcGVyLnJlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCk7XG4gICAgcmVjdC5hdHRyKCdmaWxsJywgJyMzNDllMjYnKTtcbiAgICByZWN0LmFuaW1hdGUoe1xuICAgICAgZmlsbDogJyMxMjk3OGUnLFxuICAgICAgaGVpZ2h0OiAxMC4yMyAqIGhlaWdodCxcbiAgICAgIHdpZHRoOiA4LjQgKiB3aWR0aFxuICAgIH0sIDMwMDAsICdsaW5lYXInKTtcbiAgfTtcblxuICBMZWdlbmRFeHQucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cbiAgfTtcblxuICBGdXNpb25DaGFydHMucmVnaXN0ZXJDb21wb25lbnQoJ2V4dGVuc2lvbnMnLCAnbGVnZW5kRXh0JywgTGVnZW5kRXh0KTtcbn1dKTtcblxuJ3VzZSBzdHJpY3QnO1xuY2xhc3MgR3Jvd3RoQW5hbHlzZXIge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5kYXRhID0gW1xuICAgICAgWzEsIDIsIDMsIDQsIDUsIDZdLFxuICAgICAgWzMsIDQsIDEsIDIsIDUsIDldXG4gICAgXTtcbiAgfVxuICBhbmFseXNlIChtb2RlKSB7XG4gICAgbGV0IGkgPSAwLFxuICAgICAgaWkgPSAwLFxuICAgICAgaiA9IDAsXG4gICAgICBqaiA9IDAsXG4gICAgICBudW0gPSAwLFxuICAgICAgY2hlY2tBcnIgPSBbXSxcbiAgICAgIGNoZWNrTnVtID0gMCxcbiAgICAgIGRhdGFBciA9IHRoaXMuZGF0YSxcbiAgICAgIG5EYXRhQXIgPSBbXSxcbiAgICAgIHRlbXBBciA9IFtdO1xuXG4gICAgaWYgKCFpc05hTihtb2RlKSkgeyAvLyBIYW5kbGluZyBhIG51bWJlclxuICAgICAgY2hlY2tOdW0gPSBtb2RlO1xuICAgICAgZm9yIChpID0gMCwgaWkgPSBkYXRhQXIubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICB0ZW1wQXIgPSBbXTtcbiAgICAgICAgZm9yIChqID0gMCwgamogPSBkYXRhQXJbaV0ubGVuZ3RoOyBqIDwgamo7ICsraikge1xuICAgICAgICAgIG51bSA9IGRhdGFBcltpXVtqXTtcbiAgICAgICAgICB0ZW1wQXIucHVzaCgxMDAgKiAobnVtIC0gY2hlY2tOdW0pIC8gbnVtKTtcbiAgICAgICAgfVxuICAgICAgICBuRGF0YUFyLnB1c2godGVtcEFyKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBtb2RlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBmb3IgKGkgPSAwLCBpaSA9IGRhdGFBci5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgIHRlbXBBciA9IFtdO1xuICAgICAgICBjaGVja051bSA9IG1vZGUoZGF0YUFyW2ldKTtcbiAgICAgICAgZm9yIChqID0gMCwgamogPSBkYXRhQXJbaV0ubGVuZ3RoOyBqIDwgamo7ICsraikge1xuICAgICAgICAgIG51bSA9IGRhdGFBcltpXVtqXTtcbiAgICAgICAgICB0ZW1wQXIucHVzaCgxMDAgKiAobnVtIC0gY2hlY2tOdW0pIC8gbnVtKTtcbiAgICAgICAgfVxuICAgICAgICBuRGF0YUFyLnB1c2godGVtcEFyKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFpc05hTihtb2RlLnJlbHBvc2l0aW9uKSkge1xuICAgICAgbW9kZSA9IG1vZGUucmVscG9zaXRpb247XG4gICAgICBmb3IgKGkgPSAwLCBpaSA9IGRhdGFBci5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgIHRlbXBBciA9IFtdO1xuICAgICAgICBmb3IgKGogPSAwLCBqaiA9IGRhdGFBcltpXS5sZW5ndGg7IGogPCBqajsgKytqKSB7XG4gICAgICAgICAgbnVtID0gZGF0YUFyW2ldW2pdO1xuICAgICAgICAgIGlmIChqICsgbW9kZSA+PSAwICYmIGogKyBtb2RlIDwgamopIHtcbiAgICAgICAgICAgIGNoZWNrTnVtID0gZGF0YUFyW2ldW2ogKyBtb2RlXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2hlY2tOdW0gPSBudW07XG4gICAgICAgICAgfVxuICAgICAgICAgIHRlbXBBci5wdXNoKDEwMCAqIChudW0gLSBjaGVja051bSkgLyBudW0pO1xuICAgICAgICB9XG4gICAgICAgIG5EYXRhQXIucHVzaCh0ZW1wQXIpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWlzTmFOKG1vZGUucG9zaXRpb24pKSB7XG4gICAgICBtb2RlID0gbW9kZS5wb3NpdGlvbjtcbiAgICAgIGZvciAoaSA9IDAsIGlpID0gZGF0YUFyLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgdGVtcEFyID0gW107XG4gICAgICAgIGZvciAoaiA9IDAsIGpqID0gZGF0YUFyW2ldLmxlbmd0aDsgaiA8IGpqOyArK2opIHtcbiAgICAgICAgICBudW0gPSBkYXRhQXJbaV1bal07XG4gICAgICAgICAgaWYgKG1vZGUgPj0gMCAmJiBtb2RlIDwgamopIHtcbiAgICAgICAgICAgIGNoZWNrTnVtID0gZGF0YUFyW2ldW21vZGVdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjaGVja051bSA9IG51bTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGVtcEFyLnB1c2goMTAwICogKG51bSAtIGNoZWNrTnVtKSAvIG51bSk7XG4gICAgICAgIH1cbiAgICAgICAgbkRhdGFBci5wdXNoKHRlbXBBcik7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghaXNOYU4obW9kZS5yZWxkYXRhc2V0cG9zaXRpb24pKSB7XG4gICAgICBtb2RlID0gbW9kZS5yZWxkYXRhc2V0cG9zaXRpb247XG4gICAgICBmb3IgKGkgPSAwLCBpaSA9IGRhdGFBci5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgIHRlbXBBciA9IFtdO1xuICAgICAgICBpZiAoaSArIG1vZGUgPj0gMCAmJiBpICsgbW9kZSA8IGlpKSB7XG4gICAgICAgICAgY2hlY2tBcnIgPSBkYXRhQXJbaSArIG1vZGVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoZWNrQXJyID0gZGF0YUFyW2ldO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaiA9IDAsIGpqID0gZGF0YUFyW2ldLmxlbmd0aDsgaiA8IGpqOyArK2opIHtcbiAgICAgICAgICBjaGVja051bSA9IGNoZWNrQXJyW2pdO1xuICAgICAgICAgIG51bSA9IGRhdGFBcltpXVtqXTtcbiAgICAgICAgICB0ZW1wQXIucHVzaCgxMDAgKiAobnVtIC0gY2hlY2tOdW0pIC8gbnVtKTtcbiAgICAgICAgfVxuICAgICAgICBuRGF0YUFyLnB1c2godGVtcEFyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5EYXRhQXI7XG4gIH1cbn1cbndpbmRvdy5Hcm93dGhBbmFseXNlciA9IEdyb3d0aEFuYWx5c2VyO1xufSh0aGlzLCBkb2N1bWVudCkpO1xuIl0sImZpbGUiOiJjYW52YXNsaXRlLWVzNi5taW4uanMifQ==
